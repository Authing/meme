<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2020-02-17T17:05:13+08:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Authing 官方博客</title><subtitle>Authing 为个人和企业提供安全的云端身份认证服务，是行业领先的身份认证云。</subtitle><entry><title type="html">Geek Talk 036 实录：Serverless 的前景和机会</title><link href="http://localhost:4000/blog/GeekTalk036%E5%AE%9E%E5%BD%95-Serverless-%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A/" rel="alternate" type="text/html" title="Geek Talk 036 实录：Serverless 的前景和机会" /><published>2020-02-17T00:00:00+08:00</published><updated>2020-02-17T00:00:00+08:00</updated><id>http://localhost:4000/blog/GeekTalk036%E5%AE%9E%E5%BD%95:Serverless%20%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A</id><content type="html" xml:base="http://localhost:4000/blog/GeekTalk036%E5%AE%9E%E5%BD%95-Serverless-%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A/">&lt;p&gt;Serverless 正在改变未来软件开发的模式和流程，对于大多数应用而言，借助 Serverless 服务，开发者可以将绝大多数精力投入在业务逻辑的开发整合上，大大缩短开发周期，降低运维成本。本次主题将与大家探讨 Serverless 生态中缺少的工具以及潜在的创业机会。&lt;/p&gt;

&lt;p&gt;大家好，我谢扬。很高兴能够有这个机会更加交流关于 Serverless 的技术，我们目前创业做的事情跟 Serverless 也是非常强相关的，目前聚焦研发一款 IDaaS 身份即服务产品 Authing。我之前在字节跳动负责一款日活过亿的 Serverless 产品 LarkCloud。我个人对 Serverless 保持着长期的关注，对 Serverless 行业的发展也有很多想法，今天也跟大家分享一下。&lt;/p&gt;

&lt;p&gt;我们今晚的议题主要分为四个主题，第一个是 Serverless 架构的介绍，第二个是Serverless的一些使用场景，第三个是Serverless 的使用报告，这个报告是来自于：O’Reilly Serverless survey 2019 的调研，第四是跟大家展望一下未来的 Serverless 工具链是什么样子，然后它的前景和机会是什么。&lt;/p&gt;

&lt;h2 id=&quot;1-serverless-架构介绍&quot;&gt;1. Serverless 架构介绍&lt;/h2&gt;

&lt;h3 id=&quot;1云计算的发展&quot;&gt;1）云计算的发展&lt;/h3&gt;

&lt;p&gt;首先开始我们的第一个议题：Serverless 架构，在看这个架构之前，我们先来回顾一下云计算的发展。 图中蓝色这部分是由用户来进行管理的这一部分，黄色这一部分是由云服务商来进行管理的。从早期的 On-Premises 到 FaaS ，这是云计算的发展历程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217155704.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On-Premises 的时候，机房所有的硬件、操作系统、容器、运行时环境、应用、函数等都需要自己管理；发展到 IaaS 之后，那么开发商他们不需要维护自己的硬件了，但是还是需要维护很多东西。&lt;/p&gt;

&lt;p&gt;后来 CaaS 服务出现，容器即服务，我们自己不需要再维护操作系统层面的东西，只需要维护容器，K8s 这么短时间火起来，这也是一个很重要的原因。&lt;/p&gt;

&lt;p&gt;那么再往下就是像阿里云、AWS 这种云计算 PaaS 平台出来，做了很多周边的一些工具，比如说各种各样的监控、报警，还有整个的服务器管理的控制台，然后有了这种服务之后，让客户连这些服务也不用自己来管理了，只需要管理自己的应用就好了，这就是 PaaS 服务。&lt;/p&gt;

&lt;p&gt;那么再到现在，出现 FaaS 的产品形态，最右边的 FaaS 是蓝色的，下层所有模块都是黄色的，由云服务商提供，中间还有一个灰色模块 Application ，需要云服务商和用户一起进行管理。&lt;/p&gt;

&lt;p&gt;那么这是 FaaS 的一个演进历史，总的来说 FaaS、PaaS、CaaS 等服务发展出来的缘由：&lt;strong&gt;就是让更多的客户能够专心自己的业务，而不需要去维护底层这么多跟业务无关的基础设施。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2serverless-架构&quot;&gt;2）Serverless 架构&lt;/h3&gt;

&lt;p&gt;接下来看一下 Serverless 架构，这里我们以 AWS 的一些服务为例，最左边的一个User Agent（用户），从浏览器去访问一个系统，首先会经过一个API Gateway，API Gateway会出发一个函数 Cloud Function，在AWS中叫 Lambda，然后 Lambda 会去执行一些获取资源、业务操作，这些资源都是受限的，它可能是亚马逊的 DynamoDB、也可能是 AWS S3 存储、也可能是亚马逊的 EC2，也可能是你自己的一个社交数据以及通讯录好友等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217155815.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这些资源默认是受限的，受限的时候就需要去访问一个&lt;strong&gt;无服务器的身份认证系统&lt;/strong&gt;，即图中的 Authing ，用户通过 Authing 进行登录，认证完成之后会获取一个 Token，然后用户带 Token 去请求资源，这个时候这个后端必须验证 Token 是合法的，才能够获取用户有权限访问的资源。这是 Serverless 整体的访问的一个流程。&lt;/p&gt;

&lt;p&gt;现在很多人把 Serverless 分为两块，一块叫做 FaaS（函数即服务）Functions as a Service的缩写，只需要执行一个函数，上传一个函数，然后这些函数来执行一些操作，比如说读取你的通讯、你的地址，或读取其他的业务信息。&lt;/p&gt;

&lt;p&gt;另外一块叫做 BaaS（后端即服务），全称是 Backend as a Service，就是把整个 BaaS 代码上传到服务器，然后它会自动给你做一些弹性伸缩。&lt;/p&gt;

&lt;p&gt;其实函数的粒度更细一些，然后我们今天主要探讨的还是FaaS，BaaS 现在发展的不是特别好，我个人也不是很看好 BaaS 这块的市场。&lt;/p&gt;

&lt;h3 id=&quot;3faas-函数的生命周期&quot;&gt;3）FaaS 函数的生命周期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217155848.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来我们了解一下 FaaS 的生命周期，FaaS 的全称是 Functions as a Service，开发者只需要开发一个函数，然后这个函数会根据函数的访问量来自动的做一些收缩。FaaS 有触发器，就是从哪一方进行调用，比如：你在浏览器上请求一个 FaaS ，那么就是收到一个 HTTP 请求。 又如说某个图片被上传到了腾讯云的 OSS 里面（OSS 是腾讯的存储服务），那么上传成功之后有一个回调消息，这个消息会去触发 FaaS 函数，这个就叫做 Webhook。还有一类物联网场景，比如温度采集器，测量到温度之后，会有一种 Pub/Sub 这种消息模型，这种消息模型是异步的，也是会执行这样一个 FaaS 触发器。&lt;/p&gt;

&lt;p&gt;那么一旦是触发了 FaaS 的执行，就会启动一个VM （虚拟机），那么这个 VM （虚拟机）目前主要分为两类：一类是直接 Fork 进程，然后在进程里执行这段代码，另一类就是去启动一个容器，然后在容器里面执行。在 Process 进程里执行代码的方式是不太安全的，所以现在很多人都转向了容器。当然容器的问题在于冷启动时间会非常长，也就是说假如这个函数本身执行时间只有 200 毫秒，如果加上容器的启动时间可能也是 200 毫秒，总共的时间可能变成了 400 毫秒，那么就会造成一些网络延迟，最后对用户体验产生影响。&lt;/p&gt;

&lt;p&gt;启动了这样一个 VM 之后，就会去运行这个函数，运行结束之后就会把这个实例给销毁掉，同时云服务商会根据你的运行时间来计算、所耗费的资源如：CPU、内存、包括带宽等等，然后计算这次运行花多少钱，来进行一次扣费。&lt;/p&gt;

&lt;p&gt;这就是 FaaS 函数的生命周期，接下来给大家剖析一下：为什么我们要用 FaaS ？&lt;/p&gt;

&lt;h3 id=&quot;4iaas-模型&quot;&gt;4）IaaS 模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217155916.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先，我们先来看 IaaS 模型。分别从四个视角来看一下 IaaS 的整体架构：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一是从 Service Models 视角&lt;/strong&gt;，即服务模式，分为 IaaS、PaaS、SaaS。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二是从 Cloud Stack 视角&lt;/strong&gt;，阐释来云计算是由最底层基础设施层、应用程序栈、应用程序、用户层 来构成。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三是从 Stack Components 视角&lt;/strong&gt;，来看一下详细的构成组件：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;基础设施层&lt;/strong&gt;：就是各种各样的硬件资源，如CPU、网络、带宽、硬盘等等，由基础设施厂商来提供服务，并保障最基础的系统安全。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application Stack&lt;/strong&gt;：就是需要构建应用所需要的基础软件技术栈，包括了操作系统、编程语言、应用服务器、中间件、数据库（关系数据库、图数据库、亦或是非关系数据库等）、还有报警监控服务、DevOps、CI/CD、API Gateway 等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application 层&lt;/strong&gt;：开发者去建立自己的业务模型、业务应用的时候所需要的开发组件，「认证、授权」是其中最基础的组件，然后是 UI（即用户界面）、一些事务，比如你的支付、或直播的事务等。另外是一些报告，涉及与业务相关的用户的增长数据的报告、管理业务的使用情况，Key Metrics 是什么样子；另外还需要一个后台对所有资源进行管理。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;用户层&lt;/strong&gt;：包含用户登录、注册、管理等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;第四是从不同服务模式下计算服务供应商和客户之间的责任边界。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;IaaS 模式下&lt;/strong&gt;：IDC 供应商的责任是搭建最基础的硬件基础设施、并对保障整个系统的安全。而客户需要从 OS 底层来搭建整个计算、应用环境、以及业务的开发。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PaaS 模式下&lt;/strong&gt;：类似 AWS、阿里云等云服务提供商承担了基础设施的建设、以及核心基础软件环境的搭建。如操作系统、数据库、中间件、监控服务，把这些服务抽象成了一层云，然后提供给企业进行使用。客户只需要专注在应用环境搭建、及业务层面的开发。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SaaS 模式下&lt;/strong&gt;：云服务厂商更进一步的把「应用环境」也服务化，客户仅需考虑业务层面的事情。比如应用层比较重要的两个模块：认证和授权模块也被SaaS 服务化；甚至 User 层的用户注册、登录、管理功能也被 SaaS 化，在美国的已经有 Auth0、Okta 等厂商提供这方面的服务，在中国我们 Authing 也在做类似的事情：IDaaS 身份即服务。有了 IDaaS 客户可以更直接开发业务，不需要操心：注册、登录、用户管理、认证、授权等功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回头来看在 IaaS 时代客户需要做很多事情，基建和研发成本极高，进入市场的时间成本很大。但是经过一系列「服务化」进程后，客户愈加仅需关注自己的业务代码，快速实现、快速进入市场进行验证及销售，这也是从2019年开始，Low code/No code 的创业项目备受资本热捧。&lt;/p&gt;

&lt;h3 id=&quot;5caas-容器模型&quot;&gt;5）CaaS 容器模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160041.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;随着技术迭代，进入到了容器模型的时代，企业的运维需要管理更多的产品矩阵及服务的稳定。首先是各种各样的服务发现、Container Runtime、包括整个容器集群的管理，还有一些安全性问题、性能问题，基于角色的访问控制（RBAC）、 LDAP/AD 的管理、以及 SSO 的实现等。&lt;/p&gt;

&lt;p&gt;对于开发者、运维需要学习很多 SSO 的知识，以及其他跟业务无关的很多东西，这加重了他们管理的负担。CaaS 容器模型让我们整个服务的可伸缩性大大提高了，但是也大大加重了运维人员的负担。&lt;/p&gt;

&lt;h3 id=&quot;6serverless-模型&quot;&gt;6）Serverless 模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160116.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;行业逐步发展到了今天的 Serverless 模型，在之前模型下客户需要操心很多的组件。但是，进入Serverless 模型后，客户仅需要关心是「业务代码」，设计好自己的业务模型，把代码部署到云服务中，就可以完成所有的复杂的一系列的部署、运维、监控等操作。&lt;/p&gt;

&lt;h4 id=&quot;1faas-优势&quot;&gt;1）FaaS 优势&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160243.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Serverless 带来的好处，首先是：零运维，也叫做零管理。除了零运维和零管理之外，还有其他很多优势，比如说按运行时间付费，你运行多长时间，就付多少钱；没有运行资源损耗的时候，不需要付任何钱。举个例子，可以看右边这张图，蓝色的线代表是每秒处理多少请求；红色的线是处理这些请求需要的服务器数量。可以看到蓝色的线有两个峰值，这代表需要 200 台服务器，在传统的架构下就需要准备 200 台服务器。 那么有了 FaaS 之后，就不需要买那么多服务器，只需要是把这个业务逻辑写好，然后它会自动为你进行伸缩。伸缩的策略也非常多，比如用机器学习来进行预测，或者说可以用一些即时计算进行预测等等。运维人员只需要去考虑管理更少的服务器，开发人员只需要去关心业务代码，就可以让企业更快进入市场，并且能够造一个原生的微服务，显著降低企业的管理和维护负担。&lt;/p&gt;

&lt;h4 id=&quot;2faas-劣势&quot;&gt;2）FaaS 劣势&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160309.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了优势之外，FaaS 还有很多劣势，没有一个通用的标准。比如 AWS、Google，还有国内腾讯、阿里云、华为、京东云都有 FaaS 服务，但他们没有一个通用的标准；这也造成了：客户被供应商锁定的问题，无法便捷迁移。比如说我现在用 AWS，每天请求可能上亿，想要迁移到阿里云和腾讯云就非常的麻烦。第 2 点是 FaaS 是一个黑盒子环境，开发者需要去非常了解这个东西的底层是怎么回事，他才能敢去使用，否则他无法去预估一些潜在的风险。第 4 是冷启动的问题，也不算什么太大的问题，云厂商已经解决了这类问题，有很多处理方式。&lt;/p&gt;

&lt;p&gt;第 5 个问题是最要命的一个问题，目前的 FaaS 是没有经过一个非常复杂应用案例的验证。假如说我想用 Serverless 开发一个淘宝、QQ、微信或者一个直播软件，目前是没有这种案例的。&lt;strong&gt;一方面主要是因为生态的缺乏，另外一方面的话也是因为开发人员的思维认知没有提升，这绝对不是一个技术的问题，技术已经非常成熟。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;3faas-厂商&quot;&gt;3）FaaS 厂商&lt;/h4&gt;

&lt;p&gt;下图是全球范围内在做 FaaS 的厂商，第一个 OpenWhisk 是 IBM 的开源的 FaaS 框架。另外一个是大家都知道的 AWS 的 Lambda，亚马逊的云服务算是业界的一个标准，还有 Google、微软都有类似的服务。国内主要是阿里云、腾讯云、华为云，除了这三家之外，其实京东、滴滴其他的云都有。另外一家就是字节跳动，他们叫做轻服务，这也是我当时在字节跳动开发的一款服务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160355.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此外，还有一股不可忽视的力量，就是美国的 Auth0，是一款 IDaaS - 身份认证即服务，把身份认证上云，他们拥有一个 Webtasks 产品，可以让用户、开发者通过他们的服务快速完成身份认证功能，更多的精力聚焦到具体的业务方面。另外一个就是我们在做的 Authing ，未来的话也会有一个 FnSuite 这样一款函数产品，会和我们的业务有一个非常好的打通。&lt;/p&gt;

&lt;h2 id=&quot;2-serverless-使用场景&quot;&gt;2. Serverless 使用场景&lt;/h2&gt;

&lt;h3 id=&quot;1无服务器的应用后端场景&quot;&gt;1）无服务器的应用后端场景&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160436.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来介绍一下 Serverless 的使用场景。&lt;/p&gt;

&lt;p&gt;首先第一类就是这种无服务器的应用后端，比如说我写了一段代码，然后我把它 push 到 Github 上去，这个时候 Github 的 webhook，我需要让它通知到我的 Slack 或者我的飞书。&lt;/p&gt;

&lt;p&gt;假如没有 Serverless 的情况下，需要自己写一个代码后端框架，然后自己拼接一下，写个路由，写完路由之后，还需要再把它部署到服务器上去，然后再部署运维。&lt;/p&gt;

&lt;p&gt;那么有了 FaaS 之后，只需要写个函数，把它传到阿里云或者腾讯云上，云服务商返回一个 API 链接，开发者把链接填到 Github 上去，就完成了整个操作流程，非常简单。&lt;/p&gt;

&lt;p&gt;还有一种是新闻消息推送应用，一个新的用户，它注册了一个应用，然后在我们这个消息里面就推送给他一些新闻。&lt;/p&gt;

&lt;p&gt;再比如物联网的应用的后端，比如说一个温度的信息推送系统，经过 Pub/Sub 之后来去调用一个函数，然后我们的函数来执行一些具体业务操作，比如推送到我们后台里面进行监测和管理，以及一些报警等。&lt;/p&gt;

&lt;p&gt;这就是 Serverless 的第一类无服务器应用后端场景，如 QQ、微博、微信 IM 以及简单的消息推送场景，都可以使用Serverless。&lt;/p&gt;

&lt;h3 id=&quot;2人工智能应用场景&quot;&gt;2）人工智能应用场景&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160548.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二类场景：人工智能应用。这张图来自 Google，大家可以从左往右看，比如通过 Slack、 Messenger、或 Google Home 和机器人对话，会发送一个 Http 请求，这个请求会在云端执行函数，然后这个函数会请求谷歌的 Dialogflow 是谷歌的一项对话管理服务。&lt;/p&gt;

&lt;p&gt;Dialogflow 把多轮的对话管理起来，后面的其他服务：ML、Vision API 等都是由云服务商提供的能力，&lt;strong&gt;该厂商的 Cloud Functions （云函数）就可以直接调用这些能力，这对云服务厂商来说是非常大的一个优势&lt;/strong&gt;。所以说 Serverless 只能由这些 BigTech 来研发，一些小公司或者创业公司想做Serverless 基础设施基本上是不太可能的，因为，&lt;strong&gt;Serverless 最核心竞争优势不仅仅前面的函数，更重要的是服务商本身所提供其他的能力可以供函数调用&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;3实时数据处理场景&quot;&gt;3）实时数据处理场景&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160640.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三类场景：实时数据处理，最典型的就是物联网应用，数据量非常大，用 Serverless 也是非常匹配。假如需要 1万 QPS ，函数可以立马生成支持 1万 QPS 的集群，如果你自己搭一个 EC 2 服务器或者是其他应用的话，还需要自己去管理集群，成本会变得很大。&lt;/p&gt;

&lt;h3 id=&quot;4aaas-认证即服务场景&quot;&gt;4）AaaS 认证即服务场景&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160720.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么还有一类最不容忽视的一个场景是：&lt;strong&gt;AaaS （Authentication as a Service：认证即服务），把用户注册、登录、用户管理、认证及授权等模块 SaaS 服务化。 为什么需要 AaaS 这类服务呢？主要有三点原因：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第一点：&lt;strong&gt;身份管理，是云计算里面除了计算资源、存储资源和网络资源之外，最标准化的一个产品。&lt;/strong&gt;为什么说最标准化？前面 IaaS 图中可以看到：Stack Components 包含了注册、登录、注册、用户管理以及认证和授权模块，基本上所有的应用：不管 是to B、to C、to G、to Developer 基本上都是需要的且流程非常标准；甚至在基础设施层面的服务，也都需要标准化的认证服务，比如：K8S 容器编排场景中，也都有认证/授权这种需求，另外在多云管理、DevOps 不同工具流身份的管理等。&lt;/p&gt;

&lt;p&gt;在没有 AaaS 云服务之前，大家都需要自己造的轮子，那么 AaaS 云服务的出现就让这种重复造轮子的事情不在发生，节省巨大的社会生产力，并且让身份管理变得非常简单安全。这个也是很多的厂商都看到的这样一个机会。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160755.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二点：&lt;/strong&gt;身份管理问题在数十年间，从未得到一个很好的解决，用户以自己隐私代价来为企业「身份管理不善」买单。比如很多站点的用户数据泄露事故，这些用户泄露事故不仅给企业的名声造成很大的影响，而且，严重损害了用户的隐私。近期了解到的一家公司每年花几百万来购买身份管理服务。AaaS云服务产品的出现，将大大降低客户的投入成本及安全成本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三点：&lt;/strong&gt;合规成本逐年上升：随着 GDPR、CCPA 、包括加拿大的 Castle 等，这些法律出台之后，政府对于企业在身份管理方面提出了更高的要求。假如企业要去满足这些要求，会花费巨大的成本，而使用AaaS 云服务，就可以保证企业可以非常高效、简单、安全的拥有一个合规身份管理产品。&lt;/p&gt;

&lt;h2 id=&quot;3-serverless-使用报告&quot;&gt;3. Serverless 使用报告&lt;/h2&gt;

&lt;p&gt;接下来看一个 Serverless 使用报告，一起来了解产业现状，数据来源于&lt;a href=&quot;https://www.oreilly.com/radar/oreilly-serverless-survey-2019-concerns-what-works-and-what-to-expect/&quot;&gt;O’Reilly serverless survey 2019&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先是 40% 的企业已经采用了 Serverless，这个占比还是比较大的，60% 没有采用，市场空间还是有很大的提升空间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160907.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;30% 的 Serverless 用户是一线工程师，然后是架构师、技术 leader 占 25%左右；还有技术类的也不少，另外一个出乎我意料的是：VP、总监、经理级别的用户也近20%；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160921.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外报告显示，采纳 Serverless 技术的行业也非常广泛，采用最多的是软件行业，第二大是金融及银行业，第三大行业是咨询行业。所以如果要在 Serverless 领域创业的话，可能最好的客户是金融业，要么做外包，要么服务金融业。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217160946.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;60% 的中大型规模企业采纳 Serverless：这个数字也是比较出乎意料，我们潜意识觉得采用 Serverless 新技术的可能都是小企业，但是从图中可以看到，其中一万人以上规模的公司，占到了 20%。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161005.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;50%的 Serverless 用户，以经常使用 Serverless 超过一年时间，采用 Serverless 技术超过三年时间的企业也超过了10%&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161023.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后 66% 的用户表示，采用 Serverless 技术后效果显著。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161039.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是为什么要使用 Serverless 的一些调查。我们看前三个最主要的几个理由，分别是减少运营成本、可以按序的自动的伸缩。第3个是不需要再关心服务器的维护问题，和第一点差不多，降低成本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161105.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么不用 Serverless 的原因调查显示：&lt;/p&gt;

&lt;p&gt;企业在采纳 Serverless 技术之后面临最大的挑战是：对于当下员工的教育成本很高，去教育员工还是比较难的，所以如果说要在 Serverless 领域创业的话，能做一家Serverless 领域的咨询公司也不错，与教育机构合作培训人才。&lt;/p&gt;

&lt;p&gt;第二大挑战是因为 Serverless 领域缺乏标准，很容易被供应商锁定，不容易迁移到其他供应商，这个可能需要加快推动 Serverless 行业的标准化进程，防止被供应商锁定，现在 CNCF 基金会也在推动着这个事情。第三大挑战是集成测试、调试非常困难，这也反映了 Serverless 生态供应链的不健全问题，同样，也存在创业机会。&lt;/p&gt;

&lt;p&gt;不采用 Serverless 最大的原因是：考虑到安全问题。如果要创业的话，那么去解决 Serverless 的安全性问题也是一个很大的机会。第二大原因是：因为对于 Serverless 的未知而产生的畏难情绪，不知道使用了 Serverless 会发生什么的问题。第 3 个原因是：底层云服务商正在迁移中，来不及采用 Serverless。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161217.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么角色在管理公司内部 Serverless 的基础设施？&lt;/strong&gt;首先是负责DevOps 的运营人员，第二是：软件工程师、第三是技术架构师。
这个是一个全球调查，我认为和中国的实际情况可能不太吻合，中国可能要反过来，第一可能是架构师来决定。 第二是具有话语权的软件工程师来决定是否采纳。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161243.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后一个调查显示：50%+ 的企业愿意在未来三年尝试 Serverless，所以说 Serverless 在未来还会有一个非常大的增长。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161727.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-serverless-工具链前景和机会&quot;&gt;4. Serverless 工具链、前景和机会&lt;/h2&gt;

&lt;p&gt;最后的话我们来聊一下，Serverless 工具链、前景和机会。首先我们来看工具链，分为三个版块，分别是开发、部署、监控。&lt;/p&gt;

&lt;h3 id=&quot;1开发工具&quot;&gt;1）开发工具：&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;第一是 CLI 工具：&lt;/strong&gt;主要是兼容商业 FaaS 以及开源的 FaaS ，Servereless.com 做的非常不错了，他们已经兼容了十几种 FaaS 平台。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二是编辑器的插件：&lt;/strong&gt;现在很多程序员还是习惯使用 VS Code 或者 Sublime 之类的工具进行开发的，所以需要一个非常方便的插件，可以便于管理、调试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三是 WebIDE：&lt;/strong&gt;WebIDE 是一个衍生品，主要是作为方便去开发、调试的小工具，大多数开发者应该还是会基于本地的编辑器插件来开发。&lt;/p&gt;

&lt;p&gt;此外，可能还有一些其它工具有待于补充。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161734.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2部署工具&quot;&gt;2）部署工具&lt;/h3&gt;

&lt;p&gt;常用的部署部署工具包括：Git 集成、CI/CD 持续集成、Hooks （用于同步消息到 IM 工具）等。&lt;/p&gt;

&lt;p&gt;那么还需要做一些 Cronjob ，比如说能够非常方便的部署定时任务，并且我能够发布预览版和生产版。&lt;/p&gt;

&lt;h3 id=&quot;3监控工具&quot;&gt;3）监控工具&lt;/h3&gt;

&lt;p&gt;最后我们需要 monitor 来报警，需要短信通知、公司邮件通知，还需要日志等。&lt;/p&gt;

&lt;p&gt;我说的这三点其实只是产品层面的一些小打小闹，有没有这些功能，对 Serverless 的普及和产业的提高并没有太大的影响。我觉得如果要真正促进 Serverless 发展的话，还需要做以下三件事情。&lt;/p&gt;

&lt;h2 id=&quot;5-三个能促进产业发展的机会&quot;&gt;5. 三个能促进产业发展的机会&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161819.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一件事情是有一个 FaaS Framework 专门用来编写大型项目，同时他是完全兼容 FaaS 架构的。为什么需要 FaaS Framework 呢？如果没有 FaaS Framework 的话，我们是没有办法用 FaaS 编写大型项目的。一个函数，只能做一些简单的事情，假如说需要做一个QQ，做一个微信，一个函数是肯定不行的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二件事是 Content as a Service&lt;/strong&gt;，CaaS 是 FaaS 本身的更高层级的抽象，FaaS 是提供计算能力，然后最重要的其实还是需要一个存储能力，尤其是结构化数据存储，那么就需要一个 CaaS 将存储云化。比如我我的 CaaS 平台去设计一些表和字段，然后这些字段中间还可以互相连接，最后他可以马上帮我我生成 REST API 或 GraphQL 等，并且它还有和 FaaS 结合的能力，我觉得它是未来一个很大的机会。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三类就叫做云原生编程语言。&lt;/strong&gt;这种编程语言的话，它完全是架构在现有的云计算厂商上去的，它的逻辑循环是不变的。但是他对硬盘的读写是在云上，并且它兼容各大云平台，比如说我要调用 AWS 的S3，我只需要写原生编程语言就可以，不需要去使用任何的框架，同时它可以启动云上的服务器进行调试。他从语言层面就是一个可伸缩的，比如说我我写了一个 1+1=2 这样一个计算，假如有一亿请求过来，那么在他语言层面就可以帮我调度可以抵抗一亿流量的计算资源。我觉得如果说这三件事情做好的话，能对整个产业有一个巨大的促进作用。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217161852.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后总结一下，Serverless 是真正的云计算，它真的是按需付费，然后不需要去自己去管理任何的基础设施，只需要关注自己的核心业务，目前的云计算还没有真正做到这一点。然后小公司做 Serverlss 的话基本上没戏，主要原因是缺乏信任。&lt;/p&gt;

&lt;p&gt;如果是创业公司的话，可以从以下几个层面切入。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一是做一个 FaaS 聚合器提升开发便捷度，就像 Serverless.com 做的事情一样，&lt;/li&gt;
  &lt;li&gt;第二就是做一个 FaaS 没然后接外包，这种大型的外包业务能用 Serverless 来做最好。&lt;/li&gt;
  &lt;li&gt;第三是开发一个 CaaS 然后覆盖查询业务，然后再通过和 FaaS 打通，进而完成一些高阶操作，进而赋能业务。&lt;/li&gt;
  &lt;li&gt;第四个是开发云原生变成语言，然后与教育机构、培训机构、咨询机构合作，培养人才，人才有了这个意识之后，整个产业才能有一个更大的改变。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大概是这样，谢谢大家。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/Authing/serverless-oidc&quot;&gt;https://github.com/Authing/serverless-oidc&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;身份认证云是无服务器架构的一个分支，使用身份认证云和使用无服务器架构拥有一样的好处。&lt;/p&gt;

  &lt;p&gt;请看 Authing 的思考及实践：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;为什么身份认证值得上云？&lt;/li&gt;
    &lt;li&gt;FnGroup 制定的 FaaS 规范&lt;/li&gt;
    &lt;li&gt;中国首个 FaaS 规范出炉&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;主页：&lt;a href=&quot;https://github.com/fngroup/fnlib&quot;&gt;https://github.com/fngroup/fnlib&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217162029.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-qa&quot;&gt;7. Q&amp;amp;A&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;周家泽：&lt;/strong&gt;我叫周家泽，我在西塔科技工作，我本身不是程序员，我们公司是主要做区块链当中底层的联盟链的开发。 本来我只是想了解一下 Authing 这个项目，所以我就进来一起听一下介绍这样子。然后我这边有一个问题，就是说因为 Authing 这个项目本身跟身份认证这块相关的，所以我想了解一下，就是说像从我们的角度看，这个项目或者说身份认证的项目跟区块链这块有没有结合点，然后会在什么样子的业务场景里面，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;Authing 没有区块链，但是和区块链可以有很大的联系。比如数据的主权和身份的主权。场景的话，我觉得还是政府这一块，尤其是政府对公民数据的一个管理，是非常好的一个方向。我们在中国除了运营 Authing 外，还在运营 SoLiD，SoLiD 是万维网之父 Tim 发起的项目，它想要身份和数据由个人来控制。他们在欧洲、在芬兰、在比利时已经有了一个非常好的一个政府的实践经验。稍候，我可以把把一篇论文发给大家看一下这块的实践经验。从我的个人经验来看，区块链对政府的社会治理会有很大的帮助。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;论文推荐：&lt;a href=&quot;https://authing.cn/blog/solid-flemish/&quot;&gt;通过让公民控制自己的数据简化政府流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;李涛：&lt;/strong&gt;我补充一下，包括我们这次的新冠疫情，其实我们对人群的追踪，每个人都要填很多表格，其实我们都可以用 SoLiD，把我们每个人信息是实时同步给政府的各级组织，而不需要来回筛查、反复填写。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;王凯：&lt;/strong&gt;大家好，首先感谢谢扬精彩的分享。我也学到很多，我也是一个程序员比较杂，然后什么都干，包括运维这些东西，docker 什么的，目前是自己在创业。&lt;/p&gt;

&lt;p&gt;我主要做的一个事情是在线教育，主要是留学这块市场留学跟家教，但是我们这个业务比较复杂，是包含了中国跟东南亚，还有欧美的一些各个国家。我的问题是像我们这样的业务就是跨区域的，我该如何选择一个好的 Serverless 产品呢？我用 Serverless 的体验是比较糟糕，部署的稍候挺麻烦的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;用 Serverless.com 就好，它集成了国内外的各种各样的一些服务，比如 AWS、Google、腾讯云等，它们都有一个集成，用他们的工具就可以很方便的完成工作，解决你刚才说的跨国的这样一个问题。另外 Serverless.com 现在的社区运营是有中国人的，所以中国人用起来也会比较友好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mingliang：&lt;/strong&gt;大家好，谢谢涛哥和谢扬今天给大家带来的分享，特别好。我之前在上海创业公司电商社交，然后现在把这个业务都清理掉了，目前在新加坡国立大学读博士。我是一年级刚开始读博，我的研究方向是分布式系统，所以自然对这个身份的也很感兴趣。然后我想请教一下谢扬的问题，这个身份有没有和 SDN 有一些契合的点，或者说其实没有的话，可能未来是不是也有一些可以结合的点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;我对这个领域还不是很了解，不过 SDN 这个概念的话，我是非常认可的。软件确实可以定义很多的硬件资源的，把它给出抽出来，变成一种信息化资源，包括现在的 SD-WAN。网络通信这一块也是类似这样一个事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;宋军：&lt;/strong&gt;大家好，我是宋军，谢扬的分享挺好的，我也有些收获。我先简单自我介绍一下，我现在就职于 Google。Google 的 FaaS 这里有一个小的案例可以去分享，我们当时做了一个中国的一个客户，大概用了 3000 个FaaS，这家客户叫茄子快传，他们用了半年左右，但是过了半年之后基本上切回去了。&lt;/p&gt;

&lt;p&gt;问题还是在于成本，我们都在讲，Lambda 是一个按量计费的产品，所以它成本会比较低。实际上当你的业务量特别大的时候，很有可能有非常大的成本，这种成本远远超过虚拟机的成本。&lt;/p&gt;

&lt;p&gt;我的问题是，如果有开源的 FaaS 产品，你会优先使用开源 FaaS 还是云上的 FaaS？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;从我的角度来说的话，我比较倾向于直接用云的，因为我用 FaaS 就是不想管理服务器，如果还要自己再部署一套 FaaS 对我来说是不太好的。 我还认识一个阿里的朋友，他把一个项目的成本从 800 万降到了 200 万，他怎么做到的呢？他把整个项目打包到一个函项里面去了。这个案例想说的是，每个项目都有一个阈值，然后你没有过阈值，可能就是省钱，阈值一过可能就要亏钱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;王剑宇：&lt;/strong&gt;先谢谢涛哥和谢扬带给大家的一个技术分享！ 我来自北京，我在进行一个教育创业的项目，我比较关注的是认证服务这块，我一直在考虑到底是该怎么去实现这部分功能，以前是想说自己去写认证，但是认证其实说的是实现也容易，但是你要想把它做得很完善，其实并不容易。&lt;/p&gt;

&lt;p&gt;Auth0 之前我也尝试过，但是不是太稳定，这是一个问题。然后还有一个问题，现在国内登录的习惯，大家都是用微信或者手机号，而 Auth0 对国内的这种微信还有手机的支持是没有的。AWS 的 Cognito 我也用过，也是同样的问题。所以也是这个机会，正好我想了解一下 Authing，咱们 Authing 是否更接近于国内的用户习惯。还有第二个问题，我想了解一下有没有好的工具，来简化 FaaS 开发流程的。我之前使用 FaaS 做一些图形处理，搞的非常麻烦。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;Authing 对于国内用户来说确实是更加友好的，从刚才你的描述来看，Authing 完全可以满足你的需求。再回答第二个问题，如果说要你要是跨国使用的话，那么肯定推荐 Severless.com。因为他基本上兼容市面上所有主流的云厂商。其次 Serverless 已经被腾讯战略合作了，包括他的社区其实现在是由中国人来维护的，咱们用的话其实是非常方便。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;王剑宇：&lt;/strong&gt;好的，再我问一下，因为我之前一直使用的都是国外公司的云产品，然后我就在想，就像这 Authing 这种对 AWS 的支持和对腾讯与阿里的支持，有没有一些可能，我的意思是说，他会不会更侧重于对国内一些云服务厂商的支持？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;这事有点反直觉，我们现在对 AWS 的支持反而是最好的。另外 Authing 的流量来源，第一不是中国，是美国，中国只排第二。这说明我们是必须要走国际化路线的，也符合我们一开始的战略。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;胡鹏：&lt;/strong&gt;我先简单自我介绍一下，我之前一直是在区块链领域的，然后之前的工作是钱包相关的研发。因为我们做区块链的话，可能就是思考方式就会比较倾向于那种会考虑理想化的一些场景，就像对安全的一些极端的要求，对隐私的一些极端的要求。然后像刚刚说的 FaaS 的话，其实我让我想到一个问题，就是将很多东西都交给服务器，那么服务器其实就是在这里面权限特别大，可能会有安全上的考虑，尤其是有特殊要求的人。在我们密码学里面，我们现在来看有一个方向，在云上托管的数据是加密的，然后在此基础上进行加密计算，所以我不知道你们内部的产品研发方面有没有这个方向？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;我对加密这块不是很了解，我只知道有个同态加密的东西可以在加密结果上进行计算，而不用知道原文。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;胡鹏：&lt;/strong&gt;对，关于隐私计算还有零知识证明这样的技术。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;除了刚才说的这些，还有一个东西叫做 XAdES，这个是 W3C 的一个规范，比如可以用于你的毕业证的加密，然后给到公司，公司来验证你的文凭是否是真实的，这个也可以参考一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;王晓亮：&lt;/strong&gt;大家好，我现在在一家珠海移动公司，主要在大数据方向，所以我们在海外主要用的 Google Cloud，在国内用 AWS。我们用 Serverless 挺久了，其实就是因为我们的业务调用很复杂，比如说我整个的数据进来，然后触发了函数之后，会存储到 S3 什么地方去，或者说有一些数据会重新把它变成结构化的一些数据，最后可能再触发一些函数再存到另外一个地方。我看中间这样的很长的周期，其实整个的监控感觉不是特别好处理，因为涉及到很多不同的服务之间的一些中转，所以我想知道这块有没有相应的解决方案。这是第一个问题，第二个问题就是想知道有没有什么整合的 FaaS 方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;谢扬：&lt;/strong&gt;对。这可能只能用一些微服务的这种的措施来做服务治理，你写的每一个函数都需要注册到一个中央的函数服务中心里，然后用各种勾子来 track 他的访问轨迹，最后由一个可视化的界面来展示调用记录。第二个问题我还是推荐 Serverless.com，大家用起来会比较友好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200217162159.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>ivy</name></author><category term="serverless" /><summary type="html">Serverless 正在改变未来软件开发的模式和流程，对于大多数应用而言，借助 Serverless 服务，开发者可以将绝大多数精力投入在业务逻辑的开发整合上，大大缩短开发周期，降低运维成本。本次主题将与大家探讨 Serverless 生态中缺少的工具以及潜在的创业机会。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/20200217155500.png" /></entry><entry><title type="html">案例 | 在 Odoo 中集成 Authing 完成单点登录</title><link href="http://localhost:4000/blog/%E5%9C%A8Odoo%E4%B8%AD%E9%9B%86%E6%88%90Authing%E5%AE%8C%E6%88%90%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/" rel="alternate" type="text/html" title="案例 | 在 Odoo 中集成 Authing 完成单点登录" /><published>2020-02-11T00:00:00+08:00</published><updated>2020-02-11T00:00:00+08:00</updated><id>http://localhost:4000/blog/%E5%9C%A8Odoo%E4%B8%AD%E9%9B%86%E6%88%90Authing%E5%AE%8C%E6%88%90%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/blog/%E5%9C%A8Odoo%E4%B8%AD%E9%9B%86%E6%88%90Authing%E5%AE%8C%E6%88%90%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/">&lt;p&gt;Odoo 是一套基于 Web 的开源商业业务应用程序。Odoo 的主要应用包括 CRM、网站构建器、电子商务、仓库管理、项目管理、计费和会计、销售点、人力资源、市场营销和制造等。&lt;/p&gt;

&lt;p&gt;Authing 在云上提供适用于 Web、iOS 和 Android 的通用身份认证和授权平台，可以帮助开发者和企业使用全新的方式、最简单的手段解决复杂的用户身份问题。&lt;/p&gt;

&lt;p&gt;本案例为 Odoo 集成 Authing 在云上实现单点登录的教程。&lt;/p&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;组织需要一套统一的账号体系来管理公司内外部的员工，并且能打通 Odoo；&lt;/li&gt;
  &lt;li&gt;除 Odoo 外，还有自研的系统和其他第三方系统；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;通过在 Odoo 中配置 OAuth 2.0 集成「使用 Authing 登录」从而完成对 Odoo 的单点登录；&lt;/li&gt;
  &lt;li&gt;自研系统直接通过 Authing 的 SDK 集成，将 Authing 作为身份中台向各个业务系统分发身份；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;什么是-oauth-20&quot;&gt;什么是 OAuth 2.0&lt;/h2&gt;

&lt;p&gt;OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。
这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，阮一峰老师讲的非常好，请从这篇文章查看：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/04/oauth_design.html&quot;&gt;http://www.ruanyifeng.com/blog/2019/04/oauth_design.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;集成效果&quot;&gt;集成效果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/effect.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，用户点击「使用 Authing 登录」后跳转到「Authing 登录页面」，从 Authing 登录后跳回到 Odoo 完成登录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/authing-guard.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;集成流程&quot;&gt;集成流程&lt;/h2&gt;

&lt;h3 id=&quot;在-authing-中创建-oauth-应用&quot;&gt;在 Authing 中创建 OAuth 应用&lt;/h3&gt;

&lt;p&gt;如果你还没有 Authing 账号，请到 authing.cn/login 中注册一个账号，注册完成后按照以下流程完成一个 OAuth 应用的创建。&lt;/p&gt;

&lt;p&gt;依次点击&lt;strong&gt;第三方登录&lt;/strong&gt; -&amp;gt; &lt;strong&gt;OAuth 应用&lt;/strong&gt;  -&amp;gt; &lt;strong&gt;创建 OAuth 应用&lt;/strong&gt;开始创建，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/oidc.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击后会弹出如下对话框：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/oauth-form.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;必要参数解释&quot;&gt;必要参数解释：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;应用名称&lt;/strong&gt;，必填，用户会在登录页面看到此应用名称；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;认证地址&lt;/strong&gt;，必填，一个 *.authing.cn 的二级域名，用户将访问此网址进行登录；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;回调 URL&lt;/strong&gt;，必填，回调到开发者自己业务的地址，此处请填写：
    &lt;ul&gt;
      &lt;li&gt;http://&lt;您的 Odoo=&quot;&quot; 网站域名=&quot;&quot;&gt;/auth_oauth/oea;http://&lt;您的 Odoo=&quot;&quot; 网站域名=&quot;&quot;&gt;/auth_oauth/signin；&lt;/您的&gt;&lt;/您的&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;授权模式&lt;/strong&gt;，必填，该 OAuth 应用支持的授权模式，此处请勾选「&lt;strong&gt;implicit&lt;/strong&gt;」模式：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/oauth-form-sample.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建完成后会获得应用密钥，如下所示，请保管好此信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/oauth-secret.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;在-odoo-中配置使用-authing-登录&quot;&gt;在 Odoo 中配置「使用 Authing 登录」&lt;/h3&gt;

&lt;p&gt;创建完 Authing 后打开你的 Odoo 网站，依次点击&lt;strong&gt;设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;常规设置&lt;/strong&gt; -&amp;gt; &lt;strong&gt;集成&lt;/strong&gt;，找到「&lt;strong&gt;OAuth 认证&lt;/strong&gt;」后打开此开关，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/odoo-open.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开开关后点击「OAuth 服务商」进入配置页面，如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/odoo-oauth-provider.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在新页面中填写以下信息：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;服务商名称&lt;/strong&gt;，必填，写 Authing 便于标识；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;客户端 ID&lt;/strong&gt;，必填，在 Authing 平台中配置好的应用 ID；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;允许&lt;/strong&gt;，选填，是否启用此服务商，此处请勾选；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;正文&lt;/strong&gt;，必填，显示在 Odoo 网站上登录按钮的文字；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;身份验证网址&lt;/strong&gt;，必填，请填写：https://sso.authing.cn/authorize/&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;作用域&lt;/strong&gt;，必填，请填写：user；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;验证网址&lt;/strong&gt;，必填，请填写：https://sso.authing.cn/authenticate/；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据网址&lt;/strong&gt;，必填，请填写：https://users.authing.cn/oauth/user/userinfo；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/odoo-oauth-info.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写完成并保存后访问 &lt;您的 Odoo=&quot;&quot; 网址=&quot;&quot;&gt;/web/login 可看到网页上出现了「**使用 Authing 登录**」。&lt;/您的&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/odoo-effect.webp&quot; alt=&quot;assets/images/odooxauthing/effect.webp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;体验登录&quot;&gt;体验登录&lt;/h2&gt;

&lt;p&gt;访问 &lt;您的 Odoo=&quot;&quot; 网址=&quot;&quot;&gt;/web/login 并点击「**使用 Authing 登录**」即可体验登录。&lt;/您的&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/odooxauthing/odooxauthing.webp&quot; alt=&quot;assets/images/odooxauthing/odooxauthing.webp&quot; /&gt;&lt;/p&gt;</content><author><name>ivy</name></author><category term="odoo" /><summary type="html">Odoo 是一套基于 Web 的开源商业业务应用程序。Odoo 的主要应用包括 CRM、网站构建器、电子商务、仓库管理、项目管理、计费和会计、销售点、人力资源、市场营销和制造等。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/blog/assets/images/odooxauthing/odooxauthing.webp" /></entry><entry><title type="html">Geek Talk 036：Serverless 的前景和机会</title><link href="http://localhost:4000/blog/GeekTalk036Serverless-%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A/" rel="alternate" type="text/html" title="Geek Talk 036：Serverless 的前景和机会" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/blog/GeekTalk036Serverless%20%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A</id><content type="html" xml:base="http://localhost:4000/blog/GeekTalk036Serverless-%E7%9A%84%E5%89%8D%E6%99%AF%E5%92%8C%E6%9C%BA%E4%BC%9A/">&lt;p&gt;本次与大家探讨 Serverless 生态中缺少的工具以及潜在的创业机会。&lt;/p&gt;

&lt;h2 id=&quot;主题serverless-的前景和机会&quot;&gt;主题：Serverless 的前景和机会&lt;/h2&gt;

&lt;p&gt;简介：Serverless 正在改变未来软件开发的模式和流程，对于大多数应用而言，借助 Serverless 服务，开发者可以将绝大多数精力投入在业务逻辑的开发整合上，大大缩短开发周期，降低运维成本。本次主题将与大家探讨 Serverless 生态中缺少的工具以及潜在的创业机会。&lt;/p&gt;

&lt;p&gt;时间：2月13日 19:00 - 21:00&lt;/p&gt;

&lt;p&gt;地点：&lt;strong&gt;线上视频会议&lt;/strong&gt;，报名确认后，邮件和微信通知视频入口。&lt;/p&gt;

&lt;p&gt;邮件发送详细地址，请确保邮箱地址和 &lt;strong&gt;微信ID&lt;/strong&gt; 正确&lt;/p&gt;

&lt;p&gt;人数：30人&lt;/p&gt;

&lt;p&gt;嘉宾：谢扬&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200211201759.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;蒸汽记忆创始人，SoLiD 中文社区（learnsolid.cn）发起人，连续创业者。&lt;/p&gt;

&lt;p&gt;曾任职字节跳动 LarkCloud 云服务部门核心 Hacker，负责⽇活过亿 Serverless 平台产品设计和技术研发，该平台支撑来头条系全产品矩阵：今日头条、抖音、西瓜视频、飞书等。&lt;/p&gt;

&lt;p&gt;2016 年创⽴⻰猫科技，研发容器云和 Low/No Code 平台（Gospely.com），获得Plug and Play、PreAngel 等资本投资。曾任好东西传送⻔ CTO，负责知识推荐和亿级维度舆情分析、统计⼯作，服务数⼗万专业⼈群。&lt;/p&gt;

&lt;p&gt;⻓期关注生产⼒科技，以提⾼社会生产⼒为个⼈使命。&lt;/p&gt;

&lt;p&gt;扫描以下二维码报名：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200211202308.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于-geek2startup&quot;&gt;关于 Geek2Startup&lt;/h2&gt;

&lt;p&gt;Geek2Startup 推出的专注于创业团队之间的小范围深度交流分享活动，定期邀请创业中 Geek 同 Startup 之间就产品、设计、开发和运营等维度进行交流，期待每次交流都能解决初创团队遇到的问题，并能互相碰撞出更多的火花，求质不求量，走心不走肾。&lt;/p&gt;

&lt;p&gt;目前已经进行超过 30 期，每一位嘉宾都很精彩。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200211202415.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>ivy</name></author><category term="serverless" /><summary type="html">本次与大家探讨 Serverless 生态中缺少的工具以及潜在的创业机会。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/20200211201759.png" /></entry><entry><title type="html">RBAC | 组织机构管理最佳实践</title><link href="http://localhost:4000/blog/rbac/" rel="alternate" type="text/html" title="RBAC | 组织机构管理最佳实践" /><published>2020-02-05T00:00:00+08:00</published><updated>2020-02-05T00:00:00+08:00</updated><id>http://localhost:4000/blog/rbac</id><content type="html" xml:base="http://localhost:4000/blog/rbac/">&lt;p&gt;在现实生活中，组、角色往往是分层嵌套的，呈树状结构，最常见的就是组织机构，如公司、学校等等。这篇文章，我们会假设一家互联网公司 —— 「非凡科技有限公司」，看看他们是如何使用 Authing 快速完成组织机构建模的。&lt;/p&gt;

&lt;p&gt;借助 Authing，可以快速&lt;a href=&quot;https://mp.weixin.qq.com/s/zRiymhIjTqfUlymjkGfEsA&quot;&gt;实现基于角色的访问控制（RBAC）&lt;/a&gt;。简单来说，RBAC 指的是通过用户的角色（Role）赋予其相关权限，这实现了细粒度的访问控制，并提供了一个相比直接授予单个用户权限，更简单、可控的管理方式。&lt;/p&gt;

&lt;p&gt;而在现实生活中，组、角色往往是分层嵌套的，呈树状结构，最常见的就是组织机构，如公司、学校等等。这篇文章，我们会设想一家互联网公司 —— 「非凡科技有限公司」，看看他们是如何使用 Authing 快速完成组织机构建模的。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;一非凡科技有限公司背景介绍&quot;&gt;一、非凡科技有限公司背景介绍&lt;/h2&gt;

&lt;p&gt;该公司约 300 名员工，其公司架构大致如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;一级部门有产品部、研发部、运营部、综合管理部&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一级部门下面又有二级部门，如产品部中包含产品经理和设计等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182710.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个典型的树状数据结构，有且仅有一个根节点，以及多个分层的节点。一般而言，根节点就是一家公司、一个组织，其他的每个节点都对应一个部门。&lt;/p&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;这里有一点需要注意：在 Authing 中，这样的节点对应的是一个 Group，比如「非凡科技有限公司」是一个 Group，「产品部」也是一个 Group。我们要做的，是要把这些 Group 放到他在树上所属的位置。&lt;/p&gt;

&lt;p&gt;一个 Group 可以拥有多个角色（Role），一个角色包含一个或多个权限（Permission）；而一个 Group 由若干用户（User）组成，某个 Group 中的用户会继承该 Group 下的所有角色，从而具备相关权限。&lt;/p&gt;

&lt;p&gt;了解如何管理  Group 中的 User、如何管理 Group 中的 Role、如何配置 Role 的 Permission，请见文档：&lt;a href=&quot;https://docs.authing.cn/authing/sdk/sdk-for-node/rbac&quot;&gt;角色权限管理&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;了解如何查询单个用户的 Group, Role, Permission 列表，请见文档：&lt;a href=&quot;https://docs.authing.cn/authing/sdk/sdk-for-node/query-permissions&quot;&gt;查询用户权限&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如何使用 Authing 完成组织机构管理&lt;/p&gt;

&lt;h3 id=&quot;1梳理组织机构节点&quot;&gt;1、梳理组织机构节点&lt;/h3&gt;

&lt;p&gt;首先，我们需要列举出该组织结构拥有的所有节点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;非凡科技有限公司&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;产品部&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;研发部&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运营部&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;综合管理部&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;产品经理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设计&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开发&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运维&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户运营&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;渠道运营&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;财务&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行政&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些节点在 Authing 中都是一个 Group，所以需要先创建这些 Group：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const 非凡科技有限公司 = await createGroup(&quot;非凡科技有限公司&quot;)
const 产品部 = await createGroup('产品部')
const 产品经理 = await createGroup('产品经理')
const 设计 = await createGroup('设计')
const 研发部 = await createGroup('研发部')
const 开发 = await createGroup('开发')
const 测试 = await createGroup('测试')
const 运维 = await createGroup('运维')
const 运营部 = await createGroup('运营部')
const 用户运营 = await createGroup('用户运营')
const 渠道运营 = await createGroup('渠道运营')
const 综合管理部 = await createGroup('综合管理部')
const HR = await createGroup('HR')
const 财务 = await createGroup('财务')
const 行政 = await createGroup('行政')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;h3 id=&quot;2创建组织机构&quot;&gt;2、创建组织机构&lt;/h3&gt;

&lt;p&gt;接着创建组织机构（一组树状的 Group），这需要指定根节点对应的 Group:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let org = await authing.org.createOrg({
 rootGroupId: 非凡科技有限公司._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3加入产品部及其子部门节点&quot;&gt;3、加入产品部及其子部门节点&lt;/h3&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;接着插入产品部的各级节点：&lt;/p&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;这里需要指定以下参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;组织机构 ID&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该节点对应的 Group ID&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该节点的父节点的 Group ID&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如加入产品部节点时，groupId 为 Group&lt;产品部&gt; 的 ID，parentGroupId 为 Group&lt;非凡科技有限公司&gt; 的 ID。&lt;/非凡科技有限公司&gt;&lt;/产品部&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await authing.org.addNode({
 orgId: org._id,
 groupId: 产品部._id,
 parentGroupId: 非凡科技有限公司._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 产品经理._id,
 parentGroupId: 产品部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 设计._id,
 parentGroupId: 产品部._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4以此类推加入所有节点&quot;&gt;4、以此类推，加入所有节点&lt;/h3&gt;

&lt;p&gt;研发部：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 添加研发部
await authing.org.addNode({
 orgId: org._id,
 groupId: 研发部._id,
 parentGroupId: 非凡科技有限公司._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 开发._id,
 parentGroupId: 研发部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 测试._id,
 parentGroupId: 研发部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 运维._id,
 parentGroupId: 研发部._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运营部：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await authing.org.addNode({
 orgId: org._id,
 groupId: 运营部._id,
 parentGroupId: 非凡科技有限公司._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 用户运营._id,
 parentGroupId: 运营部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 渠道运营._id,
 parentGroupId: 运营部._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;综合管理部：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 添加综合管理部
await authing.org.addNode({
 orgId: org._id,
 groupId: 综合管理部._id,
 parentGroupId: 非凡科技有限公司._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: HR._id,
 parentGroupId: 综合管理部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 财务._id,
 parentGroupId: 综合管理部._id
})
await authing.org.addNode({
 orgId: org._id,
 groupId: 行政._id,
 parentGroupId: 综合管理部._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5查看最新组织机构结构&quot;&gt;5、查看最新组织机构结构&lt;/h3&gt;

&lt;p&gt;到现在，我们的非凡科技有限公司组织机构见建模完成了，是时候获取其最新的树状结构了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const { tree } = await authing.org.findById(org._id)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​               &lt;img src=&quot;https://internal-api-space-hl.feishu.cn/space/api/file/out/zSOvcI4ejux1n1410JnoDNfAHpsLAUIVoA9J04p9ssf7lQ2DlO/&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二如何向组织机构中添加用户和配置权限&quot;&gt;二、如何向组织机构中添加用户和配置权限&lt;/h2&gt;

&lt;p&gt;前面说过，Authing 中一个组织结构节点对应一个  Group，对此我们提供了完整的 SDK。&lt;/p&gt;

&lt;h3 id=&quot;1为组织机构节点配置权限&quot;&gt;1、为组织机构节点配置权限&lt;/h3&gt;

&lt;p&gt;相关 SDK 见：&lt;a href=&quot;https://docs.authing.cn/authing/sdk/sdk-for-node/rbac&quot;&gt;角色权限管理&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;非凡科技有限公司的所有员工，都具备开具发票、使用公司邮箱的权限。与此对应，在此我们创建两个角色：Invoice Submitter 和 Corp Email User。&lt;/p&gt;

&lt;p&gt;‌&lt;/p&gt;

&lt;p&gt;其中 Invoice Submitter 具备以下权限：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;invoice:login&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invoice:create&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invoice:query&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invoice:list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invoice:delete&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Corp Email User 具备以下权限：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;corp-email:login&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;corp-email:send&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;corp-email:receive&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;corp-email:list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;corp-email:detail&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这可以通过以下代码完成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const InvoiceSubmitter = await createRole('Invoice Submitter')
let permissions = await createPermissionBatch(['invoice:login', 'invoice:create', 'invoice:query', 'invoice:list', 'invoice:delete'])
await authing.authz.addPermissionToRoleBatch({
 roleId: InvoiceSubmitter._id,
 permissionIdList: permissions.map(x =&amp;gt; x._id)
})
const CorpEmailUser = await createRole('Corp Email Use')
permissions = await createPermissionBatch(['corp-email:login', 'corp-email:send', 'corp-email:receive', 'corp-email:list', 'corp-email:detail'])
await authing.authz.addPermissionToRoleBatch({
 roleId: CorpEmailUser._id,
 permissionIdList: permissions.map(x =&amp;gt; x._id)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接着让 Group 非凡科技有限公司具备 Invoice Submitter 和 Corp Email User 两个角色：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await authing.authz.addRoleToGroup({
 roleId: InvoiceSubmitter._id,
 groupId: 非凡科技有限公司._id
})
await authing.authz.addRoleToGroup({
 roleId: InvoiceSubmitter._id,
 groupId: 非凡科技有限公司._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在，非凡科技有限公司这个节点将会具备  Invoice Submitter 和 Corp Email User 两个角色&lt;/p&gt;

&lt;h3 id=&quot;2向组织机构节点添加用户&quot;&gt;2、向组织机构节点添加用户&lt;/h3&gt;

&lt;p&gt;相关 API 见：&lt;a href=&quot;https://docs.authing.cn/authing/sdk/sdk-for-node/rbac&quot;&gt;角色权限管理&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;某个 Group 内的用户会继承该 Group 内所有角色的权限（如果有重叠，将会取并集）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面我们往用户池中注册新用户，然后将其加入非凡科技有限公司 Group 中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const user = await createUser()
await authing.authz.addUserToGroup({
 groupId: 非凡科技有限公司._id,
 userId: user._id
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3查询用户具备的权限&quot;&gt;3、查询用户具备的权限&lt;/h3&gt;

&lt;p&gt;相关 API  见：&lt;a href=&quot;https://docs.authing.cn/authing/sdk/sdk-for-node/query-permissions&quot;&gt;查询用户权限&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const { rawList: permissionList } = await authing.userPermissionList(user._id)‌
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;permissionList 如下：可见，此用户已经继承了 Invoice Submitter 和 Corp Email User 两个角色的所有权限：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  'invoice:login',
  'invoice:create',
  'invoice:query',
  'invoice:list',
  'invoice:delete',
  'corp-email:login',
  'corp-email:send',
  'corp-email:receive',
  'corp-email:list',
  'corp-email:detail',
 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开发者拿到用户权限列表之后，可以在业务代码层判断用户是否具备某一特定权限，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if &quot;corp-email:login&quot; not in user.permissionList:
  return &quot;Permission Denied&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4使用-rbac-的优势&quot;&gt;4、&lt;strong&gt;使用 RBAC 的优势&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;系统性、可重复性的权限指派&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更方便的用户权限审计，快速定位问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快速地添加、修改角色，甚至可以调用 API 实现&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;减少授予用户权限时发生错误的可能性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;引入第三方用户/新用户/未登录用户时，赋予他们预先配置好的角色，比如 guest 分组&lt;/p&gt;

    &lt;p&gt;更多关于 RBAC 的介绍请参考&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1OTk1NjU4MA==&amp;amp;mid=2247484085&amp;amp;idx=1&amp;amp;sn=c59e44be19951c8f08725e8e25985b3f&amp;amp;scene=21#wechat_redirect&quot;&gt;实现基于角色的访问控制（RBAC）&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;

&lt;p&gt;本文我们以「非凡科技有限公司」为例，介绍了如何将一棵组织机构树转换成一组嵌套、有层次的 Group。通过 Authing 提供的分组角色权限管理 API，可以为 Group 配置角色、指派成员，使得该 Group 中的用户继承所需的权限，从而完成组织机构建模与权限控制。&lt;/p&gt;

&lt;h3 id=&quot;关于-authing&quot;&gt;关于 Authing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182918.png&quot; alt=&quot;&quot; /&gt;Authing 是中国领先的 IDaaS 服务提供商，对标美国独角兽 Auth0。创始团队来自字节跳动、百度、IBM、阿里云、滴滴出行等互联网企业。Authing 提供开发者友好、易拓展的身份认证和授权平台，赋能企业在云端管理身份，主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等。 支持云交付和私有化部署方式，帮助企业和开发者千倍级提升生产效率。&lt;/p&gt;

&lt;p&gt;Authing 自上线以来已经服务海内外超过 3000 名企业开发者、拥有约 50 万的开发者社区和托管数百万终端用户，每月百万人次通过 Authing 平台进行认证，并已经服务数十家付费企业客户，覆盖教育、人工智能、出版社、 物联网等多个行业。&lt;/p&gt;</content><author><name>cj</name></author><category term="RBAC" /><summary type="html">在现实生活中，组、角色往往是分层嵌套的，呈树状结构，最常见的就是组织机构，如公司、学校等等。这篇文章，我们会假设一家互联网公司 —— 「非凡科技有限公司」，看看他们是如何使用 Authing 快速完成组织机构建模的。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://inrupt.com/sites/default/files/2018-10/Layer%200%20%281%29_0.png" /></entry><entry><title type="html">一份所有人都能理解的关于 Authing 的介绍</title><link href="http://localhost:4000/blog/a-intro-about-authing-to-everyone/" rel="alternate" type="text/html" title="一份所有人都能理解的关于 Authing 的介绍" /><published>2020-02-03T00:00:00+08:00</published><updated>2020-02-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/a-intro-about-authing-to-everyone</id><content type="html" xml:base="http://localhost:4000/blog/a-intro-about-authing-to-everyone/">&lt;p&gt;我们加入了这场游戏，带着不同的视角。&lt;/p&gt;

&lt;h2 id=&quot;authing-解决什么问题&quot;&gt;Authing 解决什么问题？&lt;/h2&gt;

&lt;h3 id=&quot;解决开发者的问题&quot;&gt;解决开发者的问题&lt;/h3&gt;

&lt;p&gt;在程序开发的过程中，&lt;strong&gt;用户认证和权限处理是非常复杂的一个模块&lt;/strong&gt;。涉及到很多枯燥，重复的工作，比如验证用户身份，验证权限，密码加密与校验，鉴权（这又涉及到安全）。&lt;/p&gt;

&lt;p&gt;举个现实例子：比如你是一个办公自动化软件厂商，你新签了一个客户，对方是一个 5 万人的企业组织，你是否要在你的软件里新建 5 万个账户？ 你准备如何建？ 你是否在你的程序设计中考虑未来的这个场景？如果再复杂一点场景的呢（比如这 5 万人的组织，还需要和他们业务上下游供应商的软件系统打通身份认证进而数据共享，你准备通过哪一个协议，如何实现这个对接）？&lt;/p&gt;

&lt;p&gt;你是否需要有人来解决这些问题？10天？ 20 天？ 30 天？还是 60 天？它的成本是多少？可能存在的风险？&lt;/p&gt;

&lt;h3 id=&quot;解决企业管理者的问题&quot;&gt;解决企业管理者的问题&lt;/h3&gt;

&lt;p&gt;你是一个企业管理者，你的公司可能采购了或使用了 2~3 套不同的软件供货商的产品。你的员工还要使用你供应链上下游供货厂商的软件系统，你的员工是否在这些不同的环境当中，一套密码走天下，或和他人共享账号？你是否可以知晓并管控这些风险？&lt;/p&gt;

&lt;p&gt;在这些不同网络边界环境中，你如何区分，分析，那些异常的登录，异常的访问？如何确保你业务数据的安全？ 是否可以通过这些登录的数据，不同应用间访问调用的授权记录，分析、识别你业务潜在的风险与变化。&lt;/p&gt;

&lt;p&gt;当你的应用需要和你供应链上下游厂家的应用共享数据，你如何实现不同组织间、不同应用间的权限对接，身份追踪？你是否需要跨组织的身份识别，进而是身份授权（经理的权限和员工的权限的授权区别），你准备如何打通，如何处理不同组织间身份的识别与鉴权，进而实现数据共享，同时保证整个业务链更流畅，更安全？&lt;/p&gt;

&lt;p&gt;当你面对 2~3 个不同软件供货商也许还好，那当我们把这个数量放大到 8~10，每一个员工的入职，离职，职位变动是否都牵涉到账号的开通和权限管理，注销和变更。每一个软件系统，每一个不同员工，每一个不同身份变更，需要多少次操作？我想没有人会喜欢这个操作。&lt;/p&gt;

&lt;p&gt;当你面对不止一家供货商的软件系统，面对他们各自不同的后端用户系统，鉴权管理，技术实现。你计划如何应付自如？&lt;/p&gt;

&lt;h3 id=&quot;解决终端用户的问题&quot;&gt;解决终端用户的问题&lt;/h3&gt;

&lt;p&gt;作为终端用户，你是否每天要面对不同的应用、 不同的系统、不同的账号？ 牢记不同的密码，不同的用户名？ 抑或一套账号密码走天下？如果走到哪里都可以让你刷脸支付，刷脸吃饭，刷脸解锁，听着是不是很美好？&lt;/p&gt;

&lt;p&gt;再进一步，你是否想更多保护自己的隐私，自由掌控你在这些不同系统上的数据，全部在你手里。就如你可以在微信里登录各种各样的小程序，你可以授权你的昵称，你的性别，你的头像，为啥不能再多授权一点呢？ 比如你的收货地址，你的简历，你的相册，你昨天写的一份文档，你在大学时代所有的照片。你修改了你的头像，你的昵称，你的收货地址，你的简历，所有这些小程序里面的读到的信息都改变了。你下架了你的简历，所有小程序-招聘类的 APP 都不再有你最新的简历，你开放了你的简历，所有照片类小程序都可以读到你的简历数据（至于每一个 APP 里如何呈现，组合这些数据是程序的事情）。&lt;/p&gt;

&lt;p&gt;你想买一个北京市内环内，总价 800-900 万， 3 房 2 厅，100 平以上，楼层朝南，税费在 20 万以下的不动产，你只需要把这个需求写出来，开放读取权限，所有的房产类小程序可以自动搜索到你的需求，为你匹配，把结果发送给你，然后由你决定打电话，由谁帮你完成交易。而不是你去不同的网站注册账户，上传需求，一遍又一遍重复的劳动。&lt;/p&gt;

&lt;p&gt;Authing 就是为解决上面的问题而生，从身份开始，从企业端开始。我们为企业提供一套效率工具，进而触达每一个人。&lt;/p&gt;

&lt;h3 id=&quot;现实的世界是什么样子&quot;&gt;现实的世界是什么样子&lt;/h3&gt;

&lt;p&gt;现实世界，我们的数字身份存在于一个虚拟的网络世界，为我们守护者不同应用的数据。在这个虚拟世界我们就是一串 0 和 1 。 在 WEB 最开始的阶段，每个人架起自己的网站，通过超文本向外界展示自己，分享自己，WEB 赋予了每一个个体通过互联网触达这个世界每一个角落的可能。后来世界发生了变化，人们发现可以通过 Web 做的更多，有了 CRM 系统，OA 系统，营销系统，论坛系统，各种各样的系统，通过数字世界的 0 和1 帮我们守护这些不同系统的数据，通过一个超链接分享我们的数据。再后来，当第一部 iPhone 被创造的时候，移动互联网来到了这个世界，随后是越来越多的 App ，我们生活在这些不同的 App ,在每一个 App 里面有一个我们的身份。&lt;/p&gt;

&lt;p&gt;一开始足够多的 App 占据了我们的生活，到后来一些超级 App 逐渐占有我们访问量的 80% ，再后来 App 可以支持手机短信登录，可以支持使用其他超级 App 登录，超级 App 成为其他 App 的母体（如微信，支付宝）。总算为我们缓解了一下身份的问题。可是 App 却拒绝彼此之间互动，我们很难将 App-1 里面的数据分享到 App-2（想象一下早期微信拒绝 163 的音乐转发，包括现在也是，你必须通过浏览器中转，才能在微信里用支付宝转账）。我们也不可能使用搜索引擎整合不同 App 之间大量的数据。&lt;/p&gt;

&lt;p&gt;这就是现实世界：每一个组织，每一个企业都在想怎么让我们留存在他们的平台，他们的城堡，他们的护城河之内（网络世界的我们就是 0 和 1）。&lt;/p&gt;

&lt;h3 id=&quot;为什么是现在&quot;&gt;为什么是现在？&lt;/h3&gt;

&lt;p&gt;云计算赋予了企业更多可能， SaaS 应用也逐渐成为应用软件新的主流打开方式。 不同的 SaaS 解决不同的问题，当我们越来越多的使用云，我们也将越来越多的面对不同的 SaaS 。 所以我们看到了 Okta , Auth0 , PingIdentity , Yufuid , AWS cognito 等等这些组织，在努力解决这些问题，身份与统一协作。&lt;/p&gt;

&lt;p&gt;我们也加入了这场游戏，带着不同的视角：如何更好的共享数据。&lt;/p&gt;

&lt;h3 id=&quot;为什么是我们&quot;&gt;为什么是我们？&lt;/h3&gt;

&lt;p&gt;也可以是任何人，只是我们还没有看到和我们拥有一样观察的同类。&lt;/p&gt;

&lt;h3 id=&quot;我们将如何做&quot;&gt;我们将如何做？&lt;/h3&gt;

&lt;p&gt;我们从把 Authing 打造为中国版的 Auth0 开始，为企业提供一套效率工具，接管复杂的权限设计，认证，授权对接，进而触达每一个个体，通过守护他们的数据，让你、我、让每一个人可以授权更多。&lt;/p&gt;

&lt;p&gt;Auth0 已被验证过的商业模式，详情&lt;a href=&quot;https://mp.weixin.qq.com/s/xxgKGwCBMQjS6nKB2tYVgg&quot;&gt;为什么 Auth0 值十亿美金?&lt;/a&gt;，最起码在中国我们没看到这么一家企业类似，除了 Authing。更多了解：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1OTk1NjU4MA==&amp;amp;mid=2247483911&amp;amp;idx=1&amp;amp;sn=fc9b87a2dab0bdab560abaf1f599524c&amp;amp;chksm=fc0e150ccb799c1ad23a2964d407ed139d64598a40dee8f6ef1e2f5e5bdc6046a3431040d580&amp;amp;token=493708779&amp;amp;lang=zh_CN#rd&quot;&gt;Auth0 和 Authing，谁是身份云的高脚杯？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;没讲太多技术，面对的问题，我想每一个人都感同身受。&lt;/p&gt;

&lt;h4 id=&quot;关于-authing&quot;&gt;关于 Authing&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182918.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authing 是中国领先的 IDaaS 服务提供商，对标美国独角兽 Auth0。创始团队来自字节跳动、百度、IBM、阿里云、滴滴出行等互联网企业。Authing 提供开发者友好、易拓展的身份认证和授权平台，赋能企业在云端管理身份，主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等。 支持云交付和私有化部署方式，帮助企业和开发者千倍级提升生产效率。&lt;/p&gt;</content><author><name>duxinshuai</name></author><category term="sticky" /><summary type="html">我们加入了这场游戏，带着不同的视角。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/wtfauthing.jpg" /></entry><entry><title type="html">论文推荐：通过让公民控制自己的数据简化政府流程</title><link href="http://localhost:4000/blog/solid-flemish/" rel="alternate" type="text/html" title="论文推荐：通过让公民控制自己的数据简化政府流程" /><published>2020-01-29T00:00:00+08:00</published><updated>2020-01-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/solid-flemish</id><content type="html" xml:base="http://localhost:4000/blog/solid-flemish/">&lt;p&gt;SoLiD 是一个令人兴奋的新项目，由万维网发明者 Tim Berners-Lee 爵士在麻省理工学院启动。 该项目旨在从根本上改变 Web 应用程序的中心化趋势， 它将真正地让数据所有权属于用户，并改善隐私问题。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://inrupt.com/solid&quot;&gt;SoLiD&lt;/a&gt; 是一个令人兴奋的新项目，由万维网发明者 Tim Berners-Lee 爵士在麻省理工学院启动。 该项目旨在从根本上改变 Web 应用程序的中心化趋势， 它将真正地让数据所有权属于用户，并改善隐私问题。&lt;/p&gt;

&lt;p&gt;本文是 SoLiD 项目在比利时的实践经验，作者有 Web 创始人 Tim 爵士、SoLiD 的核心开发者 Euben Verborgh（编者最爱的一名 SoLiD 开发者）等。详见 [SoLid中文社区]: https://learnsolid.cn/，对「数据主权」主题感兴趣的读者可以加微信：&lt;code class=&quot;highlighter-rouge&quot;&gt;jinjian0414&lt;/code&gt; ，加入微信群讨论。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;适合阅读本文的读者包括：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对新技术和自动化敏感、能感知技术趋势的开发者；&lt;/li&gt;
  &lt;li&gt;渴望提升国家治理水平的官员；&lt;/li&gt;
  &lt;li&gt;医疗和保险等民生行业的从业者；&lt;/li&gt;
  &lt;li&gt;渴望创新的企业家；&lt;/li&gt;
  &lt;li&gt;在寻找新方向、敢于承担巨大风险的投资者；&lt;/li&gt;
  &lt;li&gt;对新趋势好奇的早期尝鲜者；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;本文作者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Raf Buyle, Ruben Taelman, Katrien Mostaert, Geroen Joris2, Erik Mannens, &lt;strong&gt;Ruben Verborgh&lt;/strong&gt; and &lt;strong&gt;Tim Berners-Lee&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;涉及机构：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;imec IDLab - Ghent University, Ghent, Belgium ( raf.buyle@ugent.be )&lt;/li&gt;
  &lt;li&gt;Informatie Vlaanderen, Flemish Government, Brussels, Belgium&lt;/li&gt;
  &lt;li&gt;Department of Computer Science - University of Oxford, Oxford, UK&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;0-概要&quot;&gt;0. 概要&lt;/h2&gt;

&lt;p&gt;政府为了提供更好的公共服务，通常会存储大量的个人信息，比如公民姓名、家庭住址、婚姻状况和职业等。同时由于政府由各种政府机构组成，因此经常存在多个数据副本。这对数据一致性、隐私性和访问控制提出了更高的要求，特别是在 GDPR 和 CCPA 等类似的法律出台后。&lt;strong&gt;为了解决这个问题，我们探索了一种基于名为「SoLiD」的技术生态，这种技术可以让公民在自己的数据存储柜中维护自己的数据。&lt;/strong&gt;我们已经将 SoLiD 用于两个影响力很大的场景，在这两个场景中，公民的数据存储在个人数据库柜中，任何组织可以在得到公民授权的情况下访问公民的数据，同时公民可以选择授权哪些数据给访问者。&lt;strong&gt;我们发现 SoLiD 可以高效重塑公民与公民之间的关系、公民与数据的关系和公民与应用的关系。我们坚信这个实验可以加速公共行政管理效率和公民控制自己数据的进程。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; 个人数据、去中心化、GDPR、Solid、Linked Data。&lt;/p&gt;

&lt;h2 id=&quot;1-介绍&quot;&gt;1. 介绍&lt;/h2&gt;

&lt;p&gt;随着《通用数据保护条例》（GDPR）的出台，欧盟委员会提供了一个旨在&lt;strong&gt;赋予个人数据控制权的法律&lt;/strong&gt;。这个法律不一定会对数据存储商不利，如果合适的使用这项法律，GDPR 可以让以前复杂的数据数据流通变得简单。欧洲公司想要符合 GDPR 规范需要耗费巨大的成本和资源，而国际公司和跨国公司也必须尊重 GDPR 带给欧盟成员的权利。这造成了一些反作用，那些在欧洲且遵循 GDPR 的公司变得越来越不欢迎，反而那些非欧洲公司在遵循 GDPR 上有明显优势。&lt;/p&gt;

&lt;p&gt;并非所有受 GDPR 约束的组织都有可疑或恶意的意图，这里面有很多组织在试图遵守法律时遇到了很大的困难。地方、地区和国家政府肯定会遇到此类问题。政府的机构层级复杂，每层都有历史性增长的数据需求和流程。因此，公民数据存在很多副本，这些副本导致的安全性和法律问题已经存在于很多部门。这些政府现在要求从技术上符合 GDPR 规范，以简化他们的数据管理成本。&lt;/p&gt;

&lt;p&gt;当前，&lt;strong&gt;政府层级的数据处理面临的最大问题是：如何平滑的将数据从 A 迁移到 B&lt;/strong&gt;。这不仅在不同领域之间带来了许多技术挑战，当政府开始“数据培训”时，这也成为一个复杂的法律问题，因为涉及到的服务器过多。如：数据经过 A，B，C 和 D 站，而 B 和 C 在法律上不允许看到 A 和 D 可以看到的所有数据。因此，存在复杂的过程来精确验证 B 和 C 的访问权限是什么，然后在将数据推送到 D 时重新整合它们的结果。一个明显的例子是低排放区（LEZ），LEZ 禁止在市中心或仅在特定条件下允许车辆行驶，因为它们散发出太多有害物质。在法兰德斯，车辆与自然人进入 LEZ 时，联邦信息检查车牌号与所有人是否进入到了指定区域；最终数据经过处理，并判断是否允许车辆在城市内通行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「SoLiD」生态系统通过「公民自有数据存储柜（Personl Online Data，Pod）」 来解决上述问题，这样的好处是所有的公共和私人数据都存储在一个地方。&lt;/strong&gt;每个机构都不需要在 A 和 D 之间移动数据，而是请求公民授权自己能查看哪些数据。这样，数据就不必到处移动，并且可以自动评估每个数据请求是否是 GDPR 合规的。在线上和线下控制我们的个人数据是一个趋势性主题，有大量研究在此领域。这里面的关键概念是人们可以选择将个人数据存储在何处，这些数据是去中心化存储的。与 SoLiD 技术相似的还有区块链技术，它通常也被认为是个人数据管理的解决方案。SoLiD 相较区块链的优势是天生是协议化的，不需要各方沟通就可以互相交换数据，而区块链不认识彼此各方达成的协议。区块链对于在没有中央银行或中央管理机构的情况下进行支付的情况下非常有效，比特币是一个成功的案例。区块链可以跨多个节点复制数据，如果你在不需要受信任的第三方时，可以计划使用区块链。如果你是核心参与者，或者各方之间相互信任， 那么你不需要区块链。而且，区块链的不变性意味着无法删除数据，这可能是一个挑战 GDPR 第 17 条赋予的人们删除其个人数据的权利。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在本文中，我们探讨了对个人数据进行控制的观点，并讨论了我们使用 SoLiD 实现的两个特定用例。&lt;/strong&gt;SoLiD 提供了基于开放标准和基于 Web 的生态系统。根据 Harrison，Pardo＆Cook 的说法，生态系统是一个隐喻，通常用来表达参与者、组织、物质基础设施和象征性资源之间相互依存的社会系统，而这种生态必须在技术驱动的信息密集型社会系统中创建它们。数字生态系统的一个典型例子是开放数据生态系统。&lt;strong&gt;开放数据是指政府义务的在他们的网站上免费提供其非隐私敏感和非机密数据网络。&lt;/strong&gt;开放数据重用依赖于数据提供者提供的数据和元数据，而提供者则依赖于重用者的反馈来增加数据质量。尽管开放数据生态系统中的所有参与者都相互依赖有效地发展自己的业务，公共行政部门和决策者最有可能引导这些开放的政府生态系统。Zuiderwijk，Janssen 和 Davis指出开放数据生态系统的挑战是相关的&lt;strong&gt;“政策，许可，技术，融资，组织，文化和法律框架，以及 ICT 基础设施”&lt;/strong&gt; 。开放数据将“单向街道”重新连接为“双向通信”的生态系统，可能与使公民控制其个人数据的挑战同样困难。通过将 SoLiD 的方法应用于两种具有高影响力的场景，Flemish 政府的目标是建立能让公民控制自己数据的能力。&lt;/p&gt;

&lt;p&gt;本文的结构如下：在下一节中，我们将介绍我们要解决的挑战。之后，我们在章节 3 中介绍有关 SoLiD 的基础知识；在第 4 节中，我们讨论了使用 SoLiD 解决挑战的方法， 然后在第 5 节中讨论我们的实现。最后，我们得出结论并在第 6 节中介绍我们的经验教训。&lt;/p&gt;

&lt;h2 id=&quot;2-挑战&quot;&gt;&lt;strong&gt;2. 挑战&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;比利时北部联邦国家和地方政府旨在增强公民的能力，使其可以在公共服务、银行、健康保险和电信提供商等不同环境下在线重用其个人信息。政府通常是个人数据（例如住所、医疗信息等）的托管方，这些信息存储公共行政部门的各种信息系统这种。Flanders 的政府管理部门之间允许共享和重用数据，这样减轻了公民的管理行政负担，是欧洲实施“仅一次原则”的体现 。但是实际上，公共行政部门正在努力控制公民的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一个挑战是政府管理部门努力保留个人数据，&lt;/strong&gt;例如：最新的电子邮件地址、电话号码或银行帐号。由于一些公民很少与政府联系，个人信息在各种信息系统中通常已经过时。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二个挑战涉及允许公民在不同的环境中重用其数据&lt;/strong&gt;，例如在申请新工作时授权自己的文凭。GDPR 法规 2016/679 声明：&lt;/p&gt;

&lt;p&gt;“为了确保自由给予同意，不得提供同意在特定情况下处理个人数据的有效法律依据 是数据主体和控制器之间的明显失衡，尤其是在 控权人是公共机构，因此不太可能自由同意在特定情况下的所有情况下都应考虑在内。”（欧洲委员会， 2016年，第43条）。&lt;/p&gt;

&lt;p&gt;换句话说，政府与公民之间的关系通常被认为是不平衡的关系，因为政府拥有比公民更多的权力。因此，获得公民的同意后重用政府信息系统中管理的权威数据，不能认为是自由提供的。欧洲政府部门之间共享数据不是基于给定的同意，而是具有特定的合法依据。&lt;/p&gt;

&lt;p&gt;因此，&lt;strong&gt;我们主要研究的问题是：政府程序如何实现通过使公民控制其个人数据来简化 GDPR 合规成本？&lt;/strong&gt;这个研究问题有两个观点：&lt;strong&gt;一方面，公民如何与政府部门共享数据？另一方面，公民如何重用存储在政府信息中的数据（这些数据的用途各不一样）？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;该项目评估了 SoLiD 的去中心化原则来解决这些障碍。SoLiD 是一个生态系统，可让个人将数据存储在他们的Data Pod（数据柜）。这使用户可以真正控制其数据，因为他们可以选择在何处存储他们的数据以及谁可以访问。&lt;strong&gt;整套技术基于语义网技术（Linked Data）和去中心化，对于想让用户重新控制数据的政府部门和私人组织有很大价值。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-solid&quot;&gt;&lt;strong&gt;3. SoLiD&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SoLiD 是一个基于 Web 的生态系统，它通过提供&lt;strong&gt;个人数据柜将数据与应用程序分开&lt;/strong&gt;。个人数据柜让他们可以存储任意数据，同时可以授权哪些人、哪些应用有哪些权限读写他们的个人数据柜。&lt;/p&gt;

&lt;p&gt;图1 显示了 SoLiD 与当前应用程序体系结构的对比。其特点是不用依赖一些应用程序，公民可以控制自己的个人数据。应用程序需要从公民那里请求访问权限，以便能够对其数据进行操作。&lt;/p&gt;

&lt;p&gt;重要的是，&lt;strong&gt;SoLiD 不是应用程序或平台，而是协议：开放的标准和约定&lt;/strong&gt;。它基于现有的 Web 标准，包括 Linked Data 技术栈，任何人都可以实现他们。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205231734.png&quot; alt=&quot;&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;图片 1. Current applications are a combination of app and data. Thereby, the app becomes a centralisation point, as all interactions with that data have to go through the app. By introducing the concept of a personal data pod, Solid pushes data out of applications, such that the same data can be managed with different applications. This removes the dependency on a centralised application, as data can be stored independently in a location of the citizen’s choice.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Pod 是个人存储柜，可以存在于 Web 上的任何位置&lt;/strong&gt;，例如你自己搭建的服务器，社区搭建的免费服务器或政府提供的存储空间。在 Pod 中，所有者拥有数据创建、编辑、和控制管理的权限。所有者可以决定授予哪些人拥有权限，例如允许家庭成员看到他们的假期照片或允许同事阅读会议笔记。而且，人员、组织和应用程序可以向 Pod 的公共收件箱发布请求以获取对个人数据的访问权限。人们至少拥有一个数据柜，但他们还可以拥有其他多个 Pod，例如用于家庭数据、工作数据和医疗数据等。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;典型的中心化应用程序要求用户将数据存储在应用程序，SoLiD 通过使数据个人化来扭转这一局面，并允许用户授权哪些应用程序可以用我的数据。&lt;/strong&gt;虽然简单的应用程序只需要一个 Pod，但 SoLiD 的真正功能在于让应用程序组合来自多个 Pod 的数据，这减少了很多数据对齐会产生的成本。例如，SoLiD 上的社交网络应用程序可以将个人信息（例如帖子、朋友、评论和喜欢的信息）存储在个人数据柜中，而他们的可视化需要组合不同数据 Pod 的数据。这解决了两个基本问题，首先，数据不再需要在不同的应用程序中复制，因为应用程序将指向单个副本。二是，不再出现同步问题：因为只有一个副本数据，应用程序不会再有不同步的数据。&lt;/p&gt;

&lt;h3 id=&quot;solid-的巨大优势主要体现在以下特点上&quot;&gt;SoLiD 的巨大优势主要体现在以下特点上：&lt;/h3&gt;

&lt;h4 id=&quot;1--独立身份&quot;&gt;1.  &lt;strong&gt;独立身份&lt;/strong&gt;：&lt;/h4&gt;
&lt;p&gt;用户选择他们的身份以及身份所处的位置。在 SoLiD 中，个人标识符（WebID）是一个像 URL 一样的唯一地址；&lt;/p&gt;

&lt;h4 id=&quot;2-控制数据&quot;&gt;2. &lt;strong&gt;控制数据&lt;/strong&gt;：&lt;/h4&gt;
&lt;p&gt;用户可以授予和撤消对任何人和应用的细粒度访问权限；&lt;/p&gt;

&lt;h4 id=&quot;3-随意切换应用程序&quot;&gt;3. &lt;strong&gt;随意切换应用程序&lt;/strong&gt;：&lt;/h4&gt;
&lt;p&gt;由于数据可以灵活被不同应用访问，&lt;strong&gt;避免了供应商锁定的危险&lt;/strong&gt;，用户可以选择他们最喜欢的公司推出的产品。&lt;/p&gt;

&lt;p&gt;为了我们的目的，&lt;strong&gt;SoLiD 精确地解决了上述“数据传输”问题。数据不再在不同的政府机构之间移动，每个政府机构都直接使用原始数据来源，即公民的数据柜。这解决了多个副本和同步的问题，以及 GDPR 问题，即哪个机构有权访问哪些公民的哪些数据。&lt;/strong&gt;因为每个机构都单独对 Pod 进行请求，因此对 Pod 的读写是一个重要的话题，接下来我们会讨论这个问题。&lt;/p&gt;

&lt;h2 id=&quot;4-解决方案使用-solid-交换公民个人信息&quot;&gt;4. 解决方案：使用 SoLiD 交换公民个人信息&lt;/h2&gt;
&lt;p&gt;在本节中，我们解释了使用 SoLiD 在公民和政府之间共享数据的方法。我们首先会解释需求， 之后我们会讨论两种场景， 在这两个场景中：
（1）公民的数据（例如：电子邮件地址、电话号码）存储在 Pod 中；
（2）重用权威政府数据，例如文凭等信息。&lt;/p&gt;

&lt;h3 id=&quot;41-需求&quot;&gt;&lt;strong&gt;4.1 需求&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;对于我们的用例，我们假设所有公民都可以使用全局唯一的统一资源标识符（URI）（称为WebID）来唯一标识。该 WebID 指向有关公民的更多详细信息的，尤其是指向个人数据柜（Pod）。此外，我们假设所有政府部门和组织都具有 WebID 和 Pod。所需的组件 Fig2 所示。通常，SoLiD Pod 具有公共收件箱，任何人都可以在其中发布消息。然后消息只能由所有者读取、修改和删除。我们假定所有 Pod 都满足此约定，因为我们使用了此约定来保证用户之间的通信。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205232012.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42-用例公民共享个人信息&quot;&gt;&lt;strong&gt;4.2 用例：公民共享个人信息&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Flemish 政府开发了一种数字助理，可提供市民与不同政府部门互动&lt;/strong&gt;。一个有用的例子是向公民提供有关公共服务状态的通知。由于大多数公民几乎没有与政府之间的互动，相比较与私营部门之间的互动， 联系信息以及有关其偏好的信息通常已经过时。用了 SoLiD 之后，角色互换了，市民的 Pod 成为主要联系信息和偏好的来源。该用例解决了第一个挑战， 避免了用户必须在各个公共和门户网站中保持其数据的最新状态。&lt;/p&gt;

&lt;p&gt;我们使用电子邮件地址说明此用例，该用例适用于任何个人信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前提条件：&lt;/strong&gt;公民爱丽丝（A）可以通过其 WebID 唯一标识，同时 A 在 SoLiD Server（S）上托管有一个个人在线数据存储（Pod）。同样，组织（O）具有一个WebID 和一个 Pod。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 1.1：&lt;/strong&gt;共享个人数据。A 使用安全的令牌访问向 O 请求身份验证，成功通过身份验证后，A 可以通过网页按钮授权的形式授予 O 访问其电子邮件地址的权限，成功后，O 可以从 A 的 Pod 中读取电子邮件地址。拓展功能：若 A 不再信任 O，A 可以撤回 O 对她电子邮件地址的访问权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 1.2：&lt;/strong&gt;管理个人数据。A 使用安全的另外访问 O 请求身份验证，身份验证成功后，A 可以在 O 提供的用户界面将其电子邮件地址添加到其自己的 Pod 中。扩展功能：A 可以修改或删除她的电子邮件地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 1.3：&lt;/strong&gt;请求访问个人数据。O 将「访问 A 的电子邮件地址」请求发布到 A 的公共收件箱。看到此请求后，A 授予 O 读取对她电子邮件地址的访问权限，并将通知发送到O 的公共收件箱。收到通知后， O 可以查看 A 的电子邮件地址。&lt;/p&gt;

&lt;h3 id=&quot;42-用例公民授权权威个人信息&quot;&gt;&lt;strong&gt;4.2 用例：公民授权权威个人信息&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;政府的目标是使公民能够重用存储在不同政府级别的权威数据源中的个人信息&lt;/strong&gt;。比如，在申请新工作时共享大学颁发的文凭。或者在申请贷款时获得有关其收入的信息（如 Fig3 所示）。该用例解决了上文提到的第二个挑战。首先，公民不同意政府与其他人共享他们的数据，因此我们将公民的学位信息存储在公民自己的 Pod 中。换句话说，&lt;strong&gt;在 GDPR 的上下文中，数据主体是数据的控制者&lt;/strong&gt;。这种情况表明，&lt;strong&gt;SoLiD 重塑了公民、其权威数据以及应用程序之间的关系&lt;/strong&gt;。如果公民拒绝授权，则政府可以像今天在税收领域一样行使这项权利。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前提条件：&lt;/strong&gt;公民爱丽丝（A）拥有一个 WebID，同时有一个 Pod，托管在 SoLiD Server（S）上。同样，大学（U）具有一个 WebID 和一个 Pod。A 的雇主（E）也具有 WebID。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 2.1：&lt;/strong&gt;A 注册为 U 的学生，并且必须提供她的 WebID，这将使A 在大学毕业后收到证书。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 2.2：&lt;/strong&gt;A 保持对 U 的授权直到毕业。U 维护 A 的所有信息，直到 A 毕业。这些信息包括课程、年级、教师等。此类信息是不能公开访问的，只有 A 对此有读写权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 2.3：&lt;/strong&gt;A 大学毕业后向 U 索要证书。A 要求提供证书的（摘要）副本，以便她可以与第三方共享。U 会生成此证书的摘要，并将其发送到 A Pod 中的收件箱。该证书由 U 使用非对称加密进行数字签名。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 2.4：&lt;/strong&gt;共享文凭。现在 A 在她的收件箱中有她的文凭副本，她可以与任何人分享。例如，她可以将其发布到她的数据 Pod 中，然后授予其雇主 E 的 WebID 的读取权限。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;用例 2.5：&lt;/strong&gt;检查文凭的有效性。如果 E 要检查文凭 A 的有效期，E 必须在该文凭上检查 U 的签名。E 通过从文凭中提取签名，确定权限（U）来完成此操作。这可以是&lt;/p&gt;

&lt;p&gt;使用现有的文档签名机制（例如 XAdES）完成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205232033.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-flemish-公民的个人助理&quot;&gt;5. Flemish 公民的个人助理&lt;/h2&gt;
&lt;p&gt;在本节中，我们将讨论结合 “Mijn Burgerprofiel” 的实施方法。Mijn Burgerprofiel 的意思是&lt;strong&gt;「我的公民资料」&lt;/strong&gt;，他是 Flemish 公民的智能数字助手，通过该助手，公民可以看到其所有授权状态和数据。此外，&lt;strong&gt;欧洲还有一个标准的电子身份验证规范，名为：eIDAS&lt;/strong&gt;。该规范减少了身份被滥用或改动的风险。用户可以使用以下方式通过“我的公民”个人资料访问个人数据：&lt;/p&gt;

&lt;p&gt;1）通过智能卡读卡器或通过手机获取比利时电子身份证；
2）在手机上安装应用程序。&lt;/p&gt;

&lt;p&gt;我们在上一节详细介绍了第一个用例，即公民共享个人信息（例如，电子邮件地址）。如第 3 节所述，我们的应用程序和数据是分离的。因此，我们方法的实施还需要两个组件：
（1）数据 Pod，（2）用于查看和使用数据的应用程序界面。&lt;/p&gt;

&lt;p&gt;接下来，我们将讨论这两个组件。&lt;/p&gt;

&lt;h3 id=&quot;51-data-pod-应用程序&quot;&gt;&lt;strong&gt;5.1 Data Pod 应用程序&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在我们的实施中，我们使用 Node Solid Server 5.0.1（NSS）创建和托管数据 Pod。如果用户已经有一个 Pod，则可以用来共享个人信息。&lt;strong&gt;NSS允许我们为任何公民和政府组织创建安全的数据柜&lt;/strong&gt;。默认情况下，政府为所有公民提供数据 Pod。但是，如果公民渴望对 Pod 拥有更多控制，他们可以选择自己托管数据 Pod，例如在自己的服务器上运行 NSS。&lt;/p&gt;

&lt;h3 id=&quot;52-个人信息管理基础设施&quot;&gt;&lt;strong&gt;5.2 个人信息管理基础设施&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;为了允许政府能方便的访问公民的特定信息，我们扩展了“我的公民资料”，所有 Flemish 公民都拥有一个资料。目前，这个信息集中存储在“我的公民资料”的数据库中。为了能和 SoLiD 和谐的工作，我们修改了“我的公民资料”，该修改版本不是将信息存储在每个公民的数据 Pod 中，而是存储在 Flemish 政府的服务器中，“我的公民资料”就像一个公民，也拥有一个WebID。&lt;/p&gt;

&lt;p&gt;对于我们的用例，我们专注于存储和获取公民的电子邮件地址。为了达到这个目的，我们实现了三个组件：SoLid Linker（将原来的市民与 SoLiD 连接起来）、电子邮件提取器和电子邮件可视化工具。这些组件将在后面说明。&lt;/p&gt;

&lt;h3 id=&quot;53-solid-linker&quot;&gt;&lt;strong&gt;5.3 SoLiD Linker&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在“我的公民个人资料”的个人资料设置中，我们添加了一个字段，人们可以将其帐户与任何 SoLiD WebID 关联起来，如 Fig4 所示。默认情况下，公民使用政府提供的默认 WebID。&lt;/p&gt;

&lt;h3 id=&quot;54-email-extractor&quot;&gt;&lt;strong&gt;5.4 Email Extractor&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;如果某个公民有一个有效的 SoLid WebID 链接到其“我的公民个人资料”帐户，则应用程序可以尝试通过跟踪文件中的链接来提取其电子邮件地址。公民的数据 Pod 中包含电子邮件地址。基于WebID，电子邮件提取器组件可以确定用户的 Pod。使用此 URL，提取程序将使用“我的公民个人资料” WebID 的身份验证令牌向 SoLiD Pod 发送 HTTP GET 请求。如果公民已授予“我的公民个人资料”对该文件的读取权限，则该文件的内容将被返回；否则将返回授权错误。如果没有遇到错误，则电子邮件提取器组件将返回公民的电子邮件地址。&lt;/p&gt;

&lt;h3 id=&quot;55-email-可视化工具&quot;&gt;&lt;strong&gt;5.5 Email 可视化工具&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我们在“我的公民资料”概述页面上，添加了一个字段，该字段显示用户的电子邮件地址（如果用户有或用户授权后才显示）。该信息是从用户链接到的 WebID 中读取的，此信息始终即时提取，不会再存储在其他地方。这意味着当公民修改了该值，这个页面能立即显示更新后的值。该可视化工具可用于自动化流程，例如在即将举行的选举中发送提醒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205232131.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-总结&quot;&gt;6. 总结&lt;/h2&gt;

&lt;p&gt;在本文中，我们介绍了有关 SoLiD 在政府治理中的实施经验。Flemish 政府接受了我们对“我的公民资料”进行的修改，这样我们可以让其与 SoLiD 生态系统互操作，从而使公民可以控制其数据。我们解决了两个引人注目的挑战；首先，政府部门努力保持个人数据是最新的，其次是允许公民重复使用存储在其中的数据，这些数据存储在不同背景下的政府信息系统。该案例证明了 SoLiD 可以解决公民对数据的控制权问题。&lt;/p&gt;

&lt;p&gt;未来研究的新途径包括如何保持对用户权威数据（如住所）最大程度的利用。这应确保公民共享的信息与私营部门的关系始终是最新的。另一个明显的点是，这项研究旨在告知用户同意重用数据是他们的天赋人权。这个概念称为 “知情同意”。此外，所有操作都应透明地记录在 SoLiD Pod 中，包括：访问数据、修改数据、授权同意和撤销权利，这与我们银行帐户中的财产相当。这种细粒度和结构化的日志还可以通过使用机器学习算法来检测异常和数据泄露。为了更完整，未来的研究应该关注于不同的挑战，如如何打造可持续的商业模式。&lt;/p&gt;

&lt;p&gt;SoLiD 建立在现有 Web 标准和方法上（例如关联数据和去中心化，因此 SoLiD 可以被视为过程创新，而不是技术创新），因此与 SoLiD Pod 的集成非常简单。我们已经使用电子邮件地址说明了这种简单度，但目的是将其扩展到所有个人数据。&lt;/p&gt;

&lt;p&gt;我们希望这个在 Flemish 地区的 SoLiD 试验可以加快解决政府在公共管理和私人组织中面临着的同样的复杂性问题，同时让用户重新控制自己的数据。&lt;/p&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Belgisch Staatsblad. Wijzigingen met betrekking tot de onderzoeksmiddelen van de administratie. (2011).
http://www.ejustice.just.fgov.be/cgi_loi/change_lg.pl?language=nl&amp;amp;la=N&amp;amp;table_name=w
et&amp;amp;cn=2011041406 Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Berners-Lee, T.; Verborgh, R. Welcome to Solid. (2019).
https://rubenverborgh.github.io/Solid-DeSemWeb-2018/#title Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Buyle, R., Van Compernolle, M., De Paepe, D., Scheerlinck, J., Mechant, P., Mannens, E.,
&amp;amp; Vanlishout, Z. Semantics in the wild: a digital assistant for Flemish citizens. In Proceedings of the 11th International Conference on Theory and Practice of Electronic Governance (pp. 1-6). ACM (2018). doi: https://doi.org/10.1145/3209415.3209421&lt;/li&gt;
  &lt;li&gt;Cruellas, J. C., Karlinger, G., Pinkas, D., &amp;amp; Ross, J. Xml advanced electronic signatures
(xades). W3C Recommendation (2003). http://www.w3.org/TR/XAdES Accessed 9 July
2019&lt;/li&gt;
  &lt;li&gt;Decker, C., &amp;amp; Wattenhofer, R. (2013, September). Information propagation in the bitcoin
network. In IEEE P2P 2013 Proceedings (pp. 1-10). IEEE.&lt;/li&gt;
  &lt;li&gt;de Montjoye, Y. A., Wang, S. S., Pentland, A., Anh, D. T. T., &amp;amp; Datta, A. On the Trusted
Use of Large-Scale Personal Data. IEEE Data Eng. Bull., 35(4), 5-8 (2012)&lt;/li&gt;
  &lt;li&gt;Esposito, C., De Santis, A., Tortora, G., Chang, H., &amp;amp; Choo, K. K. R. (2018). Blockchain:
A panacea for healthcare cloud-based data security and privacy?. IEEE Cloud Computing,
5(1), 31-37.&lt;/li&gt;
  &lt;li&gt;European Commission. Regulation (EU) 2016/679 of the European Parliament and of the
Council of 27 April 2016 on the protection of natural persons with regard to the processing
of personal data and on the free movement of such data, and repealing Directive 95/46. Official Journal of the European Union (OJ), 59(1-88), 294 (2016)&lt;/li&gt;
  &lt;li&gt;European Commission. Guidelines on Consent under Regulation 2016/679 Luxembourg:
Publications Office (2018) https://ec.europa.eu/newsroom/article29/itemdetail.cfm?item_id=623051 Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;European Commission. It’s your data – take control. Luxembourg: Publications Office
(2018). https://ec.europa.eu/commission/sites/beta-political/files/data-protection-overviewcitizens_en.pdf Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Fatema, K., Hadziselimovic, E., Pandit, H. J., Debruyne, C., Lewis, D., &amp;amp; O’Sullivan, D.
Compliance through Informed Consent: Semantic Based Consent Permission and Data
Management Model. In Proceedings of the 5th Workshop on Society, Privacy and the Semantic Web - Policy and Technology (PrivOn2017), Vienna, Austria (2017)&lt;/li&gt;
  &lt;li&gt;Harrison, T. M., Pardo, T. A., &amp;amp; Cook, M. Creating open government ecosystems: A research and development agenda. Future Internet, 4(4), 900-928. MDPI AG (2012). doi:
https://doi.org/10.3390/fi4040900&lt;/li&gt;
  &lt;li&gt;Janssen, M., Charalabidis, Y., &amp;amp; Zuiderwijk, A. Benefits, adoption barriers and myths of
open data and open government. Information systems management, 29(4), 258-268 (2012).
doi: https://doi.org/10.1080/10580530.2012.716740&lt;/li&gt;
  &lt;li&gt;Jia, J., Jin, G. Z., &amp;amp; Wagman, L. The short-run effects of GDPR on technology venture investment (No. w25248). National Bureau of Economic Research (2018). doi:
10.3386/w25248&lt;/li&gt;
  &lt;li&gt;Mansour, E., Sambra, A. V., Hawke, S., Zereba, M., Capadisli, S., Ghanem, A., … &amp;amp;
Berners-Lee, T. A demonstration of the solid platform for social web applications. In Proceedings of the 25th International Conference Companion on World Wide Web (pp. 223-
15
226). International World Wide Web Conferences Steering Committee (2016). doi:
https://doi.org/10.1145/2872518.2890529&lt;/li&gt;
  &lt;li&gt;Mun, M., Hao, S., Mishra, N., Shilton, K., Burke, J., Estrin, D., … &amp;amp; Govindan, R. Personal data vaults: a locus of control for personal data streams. In Proceedings of the 6th International Conference on Emerging Networking Experiments and Technologies (p. 17).
ACM (2010). doi: https://doi.org/10.1145/1921168.1921191&lt;/li&gt;
  &lt;li&gt;Narayanan, A., Toubiana, V., Barocas, S., Nissenbaum, H., &amp;amp; Boneh, D. A critical look at
decentralized personal data architectures. arXiv preprint arXiv:1202.4503 (2012)&lt;/li&gt;
  &lt;li&gt;Pollock, R. (2011, March 11). Building the (Open) Data Ecosystem.
http://blog.okfn.org/2011/03/31/building-the-open-data-ecosystem/ Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Solid. Welcome to Solid (2019). https://solid.inrupt.com/ Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Van Kleek, M., &amp;amp; OHara, K. The future of social is personal: The potential of the personal
data store. In Social Collective Intelligence (pp. 125-158). Springer, Cham (2014)&lt;/li&gt;
  &lt;li&gt;Verborgh, R. Ruben Verborgh on data &amp;amp; privacy. Imec Magazine (2019).
https://www.imec-int.com/en/imec-magazine/imec-magazine-january-2019/back-to-thefuture-how-we-will-regain-control-of-our-personal-data Accessed 9 July 2019&lt;/li&gt;
  &lt;li&gt;Vescovi, M., Perentis, C., Leonardi, C., Lepri, B., &amp;amp; Moiso, C. My data store: toward user
awareness and control on personal data. In Proceedings of the 2014 ACM International
Joint Conference on Pervasive and Ubiquitous Computing: Adjunct Publication (pp. 179-
182). ACM (2014). doi: http://dx.doi.org/10.1145/2638728.2638745&lt;/li&gt;
  &lt;li&gt;Whitley, E. A. Informational privacy, consent and the “control” of personal data. Information security technical report, 14(3), 154-159 (2009). doi:
https://doi.org/10.1016/j.istr.2009.10.001&lt;/li&gt;
  &lt;li&gt;Yeung, C. M. A., Liccardi, I., Lu, K., Seneviratne, O., &amp;amp; Berners-Lee, T. Decentralization:
The future of online social networking. In W3C Workshop on the Future of Social Networking Position Papers (Vol. 2, pp. 2-7) (2009)&lt;/li&gt;
  &lt;li&gt;Zuiderwijk, A., Janssen, M., &amp;amp; Davis, C. Innovation with open data: Essential elements of
open data ecosystems. Information Polity, 19(1, 2), 17-33 (2014)&lt;/li&gt;
  &lt;li&gt;Zyskind, G., &amp;amp; Nathan, O. Decentralizing privacy: Using blockchain to protect personal
data. In 2015 IEEE Security and Privacy Workshops (pp. 180-184). IEEE (2015). doi:
0.1109/SPW.2015.27&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/以活服人.jpeg&quot; style=&quot;zoom:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文译者：&lt;/strong&gt;蒸汽记忆——Authing 身份云运营主体和 SoLiD 中文社区维护主体。
&lt;strong&gt;原文地址：&lt;/strong&gt;https://drive.verborgh.org/publications/buyle_egose_2019.pdf&lt;/p&gt;

&lt;h2 id=&quot;关于-authing&quot;&gt;关于 Authing&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182918.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authing 是中国领先的 IDaaS 服务提供商，对标美国独角兽 Auth0。创始团队来自字节跳动、百度、IBM、阿里云、滴滴出行等互联网企业。Authing 提供开发者友好、易拓展的身份认证和授权平台，赋能企业在云端管理身份，主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等。 支持云交付和私有化部署方式，帮助企业和开发者千倍级提升生产效率。&lt;/p&gt;

&lt;p&gt;Authing 自上线以来已经服务海内外超过 3000 名企业开发者、拥有约 50 万的开发者社区和托管数百万终端用户，每月百万人次通过 Authing 平台进行认证，并已经服务数十家付费企业客户，覆盖教育、人工智能、出版社、 物联网等多个行业。&lt;/p&gt;</content><author><name>ivy</name></author><category term="featured" /><summary type="html">SoLiD 是一个令人兴奋的新项目，由万维网发明者 Tim Berners-Lee 爵士在麻省理工学院启动。 该项目旨在从根本上改变 Web 应用程序的中心化趋势， 它将真正地让数据所有权属于用户，并改善隐私问题。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://inrupt.com/sites/default/files/2018-10/Thomas_explainer.png" /></entry><entry><title type="html">RBAC 实现基于角色的访问控制</title><link href="http://localhost:4000/blog/RBAC%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/" rel="alternate" type="text/html" title="RBAC 实现基于角色的访问控制" /><published>2020-01-17T00:00:00+08:00</published><updated>2020-01-17T00:00:00+08:00</updated><id>http://localhost:4000/blog/RBAC%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6</id><content type="html" xml:base="http://localhost:4000/blog/RBAC%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/">&lt;p&gt;基于角色的访问控制（Role-based access control，简称 RBAC），指的是通过用户的角色（Role）赋予其相关权限，这实现了细粒度的访问控制，并提供了一个相比直接授予单个用户权限，更简单、可控的管理方式。&lt;/p&gt;

&lt;h2 id=&quot;一认证-vs-授权&quot;&gt;&lt;strong&gt;一、认证 vs 授权？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;首先让我们用一句话区分认证（Authentication）和授权（Authorization）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;认证是识别请求方是谁的过程；&lt;/li&gt;
  &lt;li&gt;授权是知道了请求方是谁之后，判断其是否具备某些权限的过程；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182555.png&quot; alt=&quot;&quot; /&gt;
Authing 支持非常丰富的认证、授权手段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;认证手段有：传统密码、验证码登录、丰富的第三方登录（微信、小程序、微博、GitHub、支付宝、QQ 等，未来还会有更多），以及企业级的 LDAP、SAML、OIDC 等。&lt;/li&gt;
  &lt;li&gt;授权手段有：完整的 OAuth、OIDC 流程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于授权流程，访问控制（Access Control）策略是非常重要的一环，目前 Authing 一共支持（或即将支持）三种访问控制手段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;老版本的用户角色（deprecated）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RBAC（基于角色的访问控制，2020/02/03 已经上线）&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ABAC（基于属性的访问控制，未来即将支持）&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二什么是-rbac-&quot;&gt;&lt;strong&gt;二、什么是 RBAC ?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182755.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基于角色的访问控制（Role-based access control，简称 RBAC），指的是通过用户的角色（Role）赋予其相关权限，这实现了细粒度的访问控制，并提供了一个相比直接授予单个用户权限，更简单、可控的管理方式。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用 RBAC 时，通过分析系统用户的实际情况，基于共同的职责和需求，将他们分配给不同的角色。然后可以授予每个用户一个或多个角色，每个角色具有一个或多个权限，这种 &lt;strong&gt;用户-角色&lt;/strong&gt;、&lt;strong&gt;角色-权限&lt;/strong&gt; 间的关系，让我们可以不用再单独管理单个用户，用户从具备的角色里面继承所需的权限，从而使得用户赋权这件事变得更加简单。&lt;/p&gt;

&lt;p&gt;举一个公司内所有在职员工具备登录公司邮箱的权限的场景，如果应用 RBAC，就可以赋予所有在职员工 employee 角色，employee 角色具备 email:login 权限，如此所有员工就具备了登录公司邮箱的权限。如果有员工离职，只需要将其移出 employee 角色，而不需单独收回权限。本质上，一个角色（Role）就是一组权限（Permission）的集合。使用角色添加、删除、调整权限，相比单独赋予单个用户权限更加简单。当你的用户基数不断增长时，角色会变得尤为有用。&lt;/p&gt;

&lt;p&gt;在规划访问控制策略时，&lt;strong&gt;最佳实践是给予用户完成工作必须的最小权限。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;三使用-rbac-的优势&quot;&gt;&lt;strong&gt;三、使用 RBAC 的优势&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;系统性、可重复性的权限指派&lt;/li&gt;
  &lt;li&gt;更方便的用户权限审计，快速定位问题&lt;/li&gt;
  &lt;li&gt;快速地添加、修改角色，甚至可以调用 API 实现&lt;/li&gt;
  &lt;li&gt;减少授予用户权限时发生错误的可能性&lt;/li&gt;
  &lt;li&gt;引入第三方用户/新用户/未登录用户时，赋予他们预先配置好的角色，比如 guest 分组&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四下面是-authing--目前所支持或即将上线的相关-feature&quot;&gt;四、下面是 Authing  目前所支持或即将上线的相关 Feature：&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;Authing 支持情况&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;角色&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建/修改/删除 角色&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分页查询&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过名称、描述搜索角色&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;角色能被授予给分组&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;角色嵌套、分层&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;角色通过 namespace、多租户管理&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询角色具备的所有权限&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询角色中包含的所有用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用户&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建/修改/删除 用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分页查询&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过昵称、邮箱搜索用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看最近注册、登录的用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过第三方应用查找用户&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过 lucence 语法搜索用户&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用户可以拥有一个或多个角色&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;最多 50 个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用户能在一个或多个分组里&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;最多 50 个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个用户具备的所有角色&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个用户所在的所有分组&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个用户所具备的所有权限&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过 JSON 导入/导出用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义密码加密函数&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;权限&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建/修改/删除 权限&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分页查询&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过名称、描述搜索权限&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;能直接赋予用户权限&lt;/td&gt;
      &lt;td&gt;To be determined&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;能授权给一个或多个角色&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询所有具有某个权限的用户&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询所有具有某个权限的角色&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询所有具有某个权限的分组&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分组&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分页查询&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建/修改/删除 分组&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;通过名称、描述搜索分组&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;直接从第三方用户目录导入（如 AD, LDAP, SAML）&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分组嵌套、分层&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看分组的子分组&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;分组通过 namespace、多租户管理&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个分组具备的所有用户&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个分组具备的所有角色&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查看一个分组具备的所有权限&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;配置&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义授权流程策略（authorization policies）&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义是否将权限加入 Token&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt;默认为否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义是否将角色加入 Token&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt;默认为否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义是否将分组加入 Token&lt;/td&gt;
      &lt;td&gt;In future release&lt;/td&gt;
      &lt;td&gt;默认为否&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;YES ：&lt;/strong&gt;当前支持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In future release ：&lt;/strong&gt;已加入未来规划，不久后将会支持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;To be determined ：&lt;/strong&gt;还在设计是否需要添加此功能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;五rbac-最佳实践分组管理用户&quot;&gt;五、RBAC 最佳实践：分组管理用户&lt;/h2&gt;

&lt;p&gt;除了直接赋予用户某个角色，作为 RBAC 的最佳实践，我们还可以通过分组管理用户，将一个分组和一组角色绑定，在此分组内的所有用户就会继承这些角色，并自动具备了这些角色包含的权限。这些概念之间的关系为：&lt;strong&gt;Permission &amp;lt;-&amp;gt; Roles &amp;lt;-&amp;gt; Groups &amp;lt;-&amp;gt; Users&lt;/strong&gt;，如下图所示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;分组：Employee, Contractor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;角色：Vacation Requester, Invoice Submitter, Express Submitter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;权限：Read vacation requests, Create vacation requests 等&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205180933.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用分组管理用户、分组包含一组权限，这也是我们推荐使用的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分组和角色的区别&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分组(Group)和角色(Role)有什么区别？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;角色是一组权限的集合。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分组侧重于管理用户，一个分组通常拥有多个角色，分组内的用户会继承分组内所有角色的所有权限。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;常见的 Group 和 Role 示例：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Group&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;admin: 系统管理员，通常包含系统维护者。&lt;/li&gt;
      &lt;li&gt;employee: 正式雇员。&lt;/li&gt;
      &lt;li&gt;employer: 面试官。&lt;/li&gt;
      &lt;li&gt;hr&lt;/li&gt;
      &lt;li&gt;intern: 实习生&lt;/li&gt;
      &lt;li&gt;ops_engineer: 运维工程师&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Role&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Invoice Submitter: 具备发票报销的相关权限。&lt;/li&gt;
      &lt;li&gt;Vacation Requester: 具备申请假期的相关权限。&lt;/li&gt;
      &lt;li&gt;Corporation Email User: 具备使用公司邮箱的的相关权限。&lt;/li&gt;
      &lt;li&gt;Production Server Operator: 具备线上服务器的操作权限。&lt;/li&gt;
      &lt;li&gt;HR App User: 具备使用 HR 系统的相关权限。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举例来说：可以这样建立 Role 和 Group 之间的关系：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;intern 具备 Corporation Email User 这个角色，但是不具备 Vacation Requester 和 Invoice Submitter 这两个角色。&lt;/li&gt;
  &lt;li&gt;employee 拥有发票报销和申请假期角色，但是不具备线上服务器的操作权限。&lt;/li&gt;
  &lt;li&gt;ops_engineer 拥有发票报销、申请假期、线上服务器的角色。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们推荐&lt;strong&gt;使用分组（Group）管理用户，用 Role（角色） 管理权限&lt;/strong&gt;，不要直接赋予单个用户某个权限。如果是某个用户临时需要具备某个角色，可以临时授予，结束之后再收回。&lt;/p&gt;

&lt;h3 id=&quot;关于-authing&quot;&gt;关于 Authing&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn/blog/20200205182918.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authing 是中国领先的 IDaaS 服务提供商，对标美国独角兽 Auth0。创始团队来自字节跳动、百度、IBM、阿里云、滴滴出行等互联网企业。Authing 提供开发者友好、易拓展的身份认证和授权平台，赋能企业在云端管理身份，主要功能包括：单点登录、用户分析、扫码登录、多因素认证、行为审计、风险控制、跨平台设备管理、IoT 身份认证等；兼容国际各类标准协议：OAuth2.0、OIDC、SAML、AD/LDAP、WS-Fed、JWT 等。 支持云交付和私有化部署方式，帮助企业和开发者千倍级提升生产效率。&lt;/p&gt;

&lt;p&gt;Authing 自上线以来已经服务海内外超过 3000 名企业开发者、拥有约 50 万的开发者社区和托管数百万终端用户，每月百万人次通过 Authing 平台进行认证，并已经服务数十家付费企业客户，覆盖教育、人工智能、出版社、 物联网等多个行业。&lt;/p&gt;

&lt;h3 id=&quot;相关阅读&quot;&gt;相关阅读&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/qVlqwA2ZhZeKsl0RdVsojQ&quot;&gt;Authing 的故事：我为什么开发 Authing？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WGL7n9D1L0UG71276Wn6Iw&quot;&gt;如何在远程办公中保持高效的&lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WGL7n9D1L0UG71276Wn6Iw&quot;&gt;研发效率？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KkUhNuXnrsWa5Q-ucmIlqA&quot;&gt;一份普通人能理解的关于 Authing 的介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/TlYmDRg1q_glJ7Icsj0arw&quot;&gt;Authing 是什么以及为什么需要 Authing？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/TlYmDRg1q_glJ7Icsj0arw&quot;&gt;为什么身份认证值得上云？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/6SsGcgoesVGaLT19auK7yg&quot;&gt;Authing &lt;/a&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/6SsGcgoesVGaLT19auK7yg&quot;&gt;@ 2019 总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Xd3SR2WaB15a250RxEZWpg&quot;&gt;Authing 开发资源最全合集&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>cj</name></author><category term="rbac" /><summary type="html">基于角色的访问控制（Role-based access control，简称 RBAC），指的是通过用户的角色（Role）赋予其相关权限，这实现了细粒度的访问控制，并提供了一个相比直接授予单个用户权限，更简单、可控的管理方式。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/20200205182755.png" /></entry><entry><title type="html">使用 Authing 集成 AWS 服务</title><link href="http://localhost:4000/blog/%E4%BD%BF%E7%94%A8Authing%E4%B8%8EAWS%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90/" rel="alternate" type="text/html" title="使用 Authing 集成 AWS 服务" /><published>2019-12-20T00:00:00+08:00</published><updated>2019-12-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/%E4%BD%BF%E7%94%A8Authing%E4%B8%8EAWS%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90</id><content type="html" xml:base="http://localhost:4000/blog/%E4%BD%BF%E7%94%A8Authing%E4%B8%8EAWS%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90/">&lt;p&gt;Authing 是一个开发者友好、拓展性极高的身份认证云服务，每月有超过 100 万次用户被 Authing 认证和授权。本次分享将介绍如何企业常见的认证授权场景，可以满足中国本地用户对于 Cognito User Pool 的需求，并且提供本地化的服务。同时本文将讲解 Authing 如何与 AWS 各类服务集成，如 Cognito Identity Pool, IAM, S3, Lambda, AD 等等。&lt;/p&gt;

&lt;h2 id=&quot;cognito-identity-pool&quot;&gt;Cognito Identity Pool&lt;/h2&gt;

&lt;p&gt;Cognito User Pool 负责认证。终端用户可以通过 user pool 完成注册登录流程。&lt;/p&gt;

&lt;p&gt;Cognito Identity Pool 负责授权（访问控制），将使用 AWS 资源的权利授权给终端用户。&lt;/p&gt;

&lt;p&gt;Amazon Web Services(AWS) 虽然作为市场份额全球第一的云计算厂商，其产品也不是完美无缺的，Cognito （AWS 的身份认证解决方案）及其附带的中文文档就是一个反面教材，其难用程度令人发指。当然，除了不易用之外，还有访问速度缓慢，不适用于中国市场等问题存在。&lt;/p&gt;

&lt;p&gt;而国产的 Authing 可以解决使用 Cognito 的诸多问题，使用 Authing User Pool， 可以替代 Cognito User Pool，构建起国内用户与 AWS 资源之间的桥梁。&lt;/p&gt;

&lt;p&gt;在创建 AWS Identity Pool 时，可以配置自定义 Authentication providers，这里我们将 Developer provider name 设置为 &lt;authing-userpool-id&gt;.authing.cn  格式：&lt;/authing-userpool-id&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-042750.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-042809.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个流程中一共有三方参与：终端用户、Authing 、AWS，具体过程如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;终端用户使用 Authing 用户池完成认证&lt;/li&gt;
  &lt;li&gt;Authing 开发者在服务端调用 AWS 的 GetOpenIdTokenForDeveloperIdentity 接口，获得 IdentityId 和 Token。&lt;/li&gt;
  &lt;li&gt;终端用户调用 GetCredentialsForIdentity 使用 token 换取访问 AWS 资源所需的 credentials。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GetOpenIdTokenForDeveloperIdentity 需要以下参数：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;IdentityPoolId：你的 AWS Identity Pool ID。&lt;/li&gt;
  &lt;li&gt;Logins：一组 provider name 到 provider tokens 的映射，provider token 可以任意可以区分用户的字符串，比如 Authing 用户在用户池内的唯一 ID。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Logins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;authing-userpool-id&amp;gt;.authing.cn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5ccb24701bbaf00d50xxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Authing&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;用户池&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们能从请求返回数据中 获得 IdentityId 和 Token。这样，我们就在 Authing 用户池用户 和 Cognito Identity ID 之间构建起了联系。接着可以使用 GetCredentialsForIdentity 获取 credentials，从而访问相关资源。&lt;/p&gt;

&lt;h2 id=&quot;iam&quot;&gt;IAM&lt;/h2&gt;

&lt;p&gt;IAM(Identity and Access Management) 管理 Users、Groups、 Roles 对 AWS 资源的访问权限，通过给 Role 添加相关权限，达到使用相关 AWS 资源的目的。&lt;/p&gt;

&lt;p&gt;例如，新建 Cognito Identity Pool 的时候，会默认创建两个 role：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-042856.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以给此 role 添加相关权限，比如&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-042906.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过集成 Authing 与 Cognito Identity Pool，我们在 Authing User ID 与 Cognito Identity ID 之间构建起了映射关系。而每个 Identity ID，可以拥有不同的 Role。不同的 Role，具备不同的 AWS 资源访问权限。这也就将 Authing 和 AWS 的各种服务结合了起来。&lt;/p&gt;

&lt;h2 id=&quot;s3simple-storage-service&quot;&gt;S3（Simple Storage Service）&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在线 Demo：https://sample.authing.cn/aws-demo/&lt;/p&gt;

  &lt;p&gt;Github Repo：https://github.com/Authing/aws-s3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面举一个具体的例子：用户使用 Authing 登录之后，会得到一个唯一的 Authing User ID，通过 GetOpenIdTokenForDeveloperIdentity，将 Authing User ID 与 Cognito Identity ID 对应起来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-042938.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 aws console 配置 role permissions 和 bucket policy，实现每个 Authing 用户能且仅能对 users/&lt;cognito-identity-id&gt; 目录的文件进行增删改查操作：&lt;/cognito-identity-id&gt;&lt;/p&gt;

&lt;p&gt;Bucket Policy 如下：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Policy1576670578319&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ListYourObjects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:ListBucket&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws-cn:s3:::authing-aws-demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringLike&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users/${cognito-identity.amazonaws.com:sub}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ReadWriteDeleteYourObjects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:GetObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:PutObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s3:DeleteObject&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws-cn:s3:::authing-aws-demo/users/${cognito-identity.amazonaws.com:sub}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws-cn:s3:::authing-aws-demo/users/${cognito-identity.amazonaws.com:sub}/*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${cognito-identity.amazonaws.com:sub}&lt;/code&gt; 会被替换成当前请求用户的 Cognito Identity Id。Statement ListYourObjects 让用户具备遍历 &lt;code class=&quot;highlighter-rouge&quot;&gt;users/${cognito-identity.amazonaws.com:sub}&lt;/code&gt; 的权利，Statement ReadWriteDeleteYourObjects 让用户可以操作 &lt;code class=&quot;highlighter-rouge&quot;&gt;users/${cognito-identity.amazonaws.com:sub}&lt;/code&gt; 下面的文件。&lt;/p&gt;

&lt;p&gt;Role Permission 同理：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043010.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;实现效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043027.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;lambda&quot;&gt;Lambda&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在线 Demo：https://sample.authing.cn/aws/
Github Repo：https://github.com/Authing/authing-lambda&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Authing 非常适合用作 serverless 函数计算的身份认证层，开发者可以在  Authing 控制台（第三方登录 -&amp;gt; OIDC 应用）创建 OIDC 应用：&lt;/p&gt;

&lt;p&gt;然后在前端用几行代码即可实现一个具备标准 OIDC 认证流程的表单：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AuthingSSO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5dfa6fd7673d4xxxxxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OIDC 应用的 ID&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;appDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws-demo.authing.cn&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trackSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 未登录&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;authing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 唤起下面显示的登录表单&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成的表单如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043059.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以通过以下网址体验：https://aws-demo.authing.cn/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043110.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户使用 Authing 成功登录之后，会在 authorization 请求头中带上 token，开发者只需要在 lambda 函数中对这个 token 进行验证即可。&lt;/p&gt;

&lt;p&gt;Authing 提供丰富的检验 token 的手段供开发者选择：
文档地址：https://learn.authing.cn/authing/advanced/authentication/verify-jwt-token&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 Authing 提供的 SDK&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Authing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'authing-js-sdk'&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Authing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'your_client_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'your_client_secret'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkLoginStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'USER_JWT_TOKEN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;若&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;合法，则返回数据为：&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'已登录'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Token 数据&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若 Token 不合法，message 会提示相关错误信息。我们还提供了所有的错误代码列表：https://learn.authing.cn/authing/advanced/error-code 。&lt;/p&gt;

&lt;p&gt;如果你想 reduce package size，也可以直接构造 GraphQL 请求：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://users.authing.cn/graphql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;operationName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkLoginStatus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`query checkLoginStatus($token: String) {
          checkLoginStatus(token: $token) {
            status
            code
            message
            token {
              data {
                email
                id
                clientId
                unionid
              }
              iat
              exp
            }
          }
        }`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'USER_JWT_TOKEN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里传入 request 携带的 token&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkLoginStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// handle login status&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// handle error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用 OIDC 密钥自己检验：传入 jwt.verify 函数的第二个参数就是 OIDC 应用的密钥。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorizationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// remove &quot;bearer &quot; from token&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorizationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'02128f34e11b11xxxxxxxxxxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;expired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exp&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unauthorized, Login information has expired.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatePolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Allow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methodArn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unauthorized'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unauthorized'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;使用 OIDC 应用的 rest 接口
https://oauth.authing.cn/oauth/oidc/validate_access_token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GET 请求参数：access_token，必填。
返回的 Response 示例：&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isRevoked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isDeleted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yokj1gN8kCBixIhc6KEj7SNsMcJ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yokj1gN8kCBixIhc6KEj7SNsMcJ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;accessToken&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkVlJmenZEbHZQRG50dG9LWnJ1WkciLCJzdWIiOiI1Y2U1M2FlYTlmODUyNTdkZDEzMmQ3NDkiLCJpc3MiOiJodHRwczovL29hdXRoLmF1dGhpbmcuY24vb2F1dGgvb2lkYyIsImlhdCI6MTU2OTU4MDMwOCwiZXhwIjoxNTY5NTgzOTA1LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIiwiYXVkIjxxxxxxxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;accessTokenExpiresAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-09-27T11:31:45.000Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openid profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;appId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5d01e389985f81c6xxxxxxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userOrClientId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5ce53aea9f8525xxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;when&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-09-27T10:31:48.000Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iss&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://oauth.authing.cn/oauth/oidc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5ce53aea9f85257dd13xxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aud&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5d01e389985f81c6c1xxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1569583905000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1569580308000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5ce53aea9f85257xxxxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;issued_to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://sso.authing.cn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5d01e389985f81c6xxxxxxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expires_in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;access_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;offline&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;开发者可以通过验证结果的不同，进行相应的业务逻辑处理。
如在这个示例中，未登录下 private 接口的 http status code 为 401：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043227.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登录之后成功返回数据：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://lcjim-img.oss-cn-beijing.aliyuncs.com/2019-12-20-043236.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ad&quot;&gt;AD&lt;/h2&gt;

&lt;p&gt;Authing 为每个用户池自动创建了一个 LDAP 服务，访问 Authing LDAP 服务器需要使用 Authing 的应用密钥 (Secret)，认证命令如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ldapsearch -H ldap://ldap.authing.cn:1389 -x -D &quot;ou=users,o=AUTHING_CLIENT_ID,dc=authing,dc=cn&quot; -w &quot;AUTHING_CLIEENT_SECRET&quot;  -LLL -b &quot;ou=users,o=AUTHING_CLIENT_ID,dc=authing,dc=cn&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体文档可见：https://learn.authing.cn/authing/advanced/ldap-idp。&lt;/p&gt;

&lt;p&gt;通过 Active Directory Connector，AWS 开发者可以直接复用 Authing 的 LDAP-IdP。&lt;/p&gt;

&lt;h2 id=&quot;其他-aws-资源&quot;&gt;其他 AWS 资源&lt;/h2&gt;

&lt;p&gt;在上面的 Cognito Identity Pool 一节中，我们实现了 Authing User ID 与 Cognito Identity ID 的一一对应的关系，这样 Authing 就具备了使用所有 aws 相关资源的能力，开发者可以参考我们前面给的示例。&lt;/p&gt;</content><author><name>cj</name></author><category term="featured" /><summary type="html">Authing 是一个开发者友好、拓展性极高的身份认证云服务，每月有超过 100 万次用户被 Authing 认证和授权。本次分享将介绍如何企业常见的认证授权场景，可以满足中国本地用户对于 Cognito User Pool 的需求，并且提供本地化的服务。同时本文将讲解 Authing 如何与 AWS 各类服务集成，如 Cognito Identity Pool, IAM, S3, Lambda, AD 等等。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/aws-authing.jpg" /></entry><entry><title type="html">Web 全栈大会：万维网之父的数据主权革命</title><link href="http://localhost:4000/blog/%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B9%8B%E7%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%BB%E6%9D%83%E9%9D%A9%E5%91%BD/" rel="alternate" type="text/html" title="Web 全栈大会：万维网之父的数据主权革命" /><published>2019-11-20T00:00:00+08:00</published><updated>2019-11-20T00:00:00+08:00</updated><id>http://localhost:4000/blog/%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B9%8B%E7%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%BB%E6%9D%83%E9%9D%A9%E5%91%BD</id><content type="html" xml:base="http://localhost:4000/blog/%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B9%8B%E7%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%BB%E6%9D%83%E9%9D%A9%E5%91%BD/">&lt;p&gt;Web 给予了每个人建立自己博客和网站的自由，每个人都可以在自己的网站或其他人的网站内分享他们的知识、见解和故事。Web 就相当于一个人的精神世界，Web 是从生活中来的，但是却高于生活。&lt;/p&gt;

&lt;h1 id=&quot;web-全栈大会万维网之父的数据主权革命&quot;&gt;Web 全栈大会：万维网之父的数据主权革命&lt;/h1&gt;

&lt;p&gt;大家好，今天我和大家分享一下由万维网之父发起的一场数据主权革命。什么叫数据主权？很容易理解，现在我们的数据是把持在巨头手里的，你的微信通讯录和聊天记录都无法导出，不管是从人权角度还是从法理角度，这些数据应该都是属于你的，但是你没有控制权，SoLiD 要做的核心的一件事就是让这些数据归于用户控制。它带来了一种全新的开发范式，这个范式是啥我们接下来会有介绍。那么什么是革命？革谁的命？也非常清晰，就是革那些体大不尊的巨头的命。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文整理自蒸汽记忆创始人谢扬在 2019 年 11 月 16 日在成都 Web 全栈大会上的演讲，内容有删改。
完整PPT 可从 Github 上查看：https://leinue.github.io/webfullstack-2019/index.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么在开始之前呢，我先按照惯例自我介绍下。我目前在创业，我们公司的名字叫做蒸汽记忆，取自工业革命的开始，我们想做提高社会的生产力的事情，并将全球的公开信息变成知识图谱。我们的使命是在一个身份下互联全人类的文化基因，构建全球互联的生产力平台。同时，我是 SoLiD 中文网的发起人，SoLiD 就是今天要讲的主题。在职业经历上，我是一名 Web 全栈开发者，其次也是知识图谱研究者。在创业之前，我曾经任职好东西传送门的 CTO，当时主要负责知识推荐和舆情分析等工作。在字节跳动时主要负责一款日活过亿的 Serverless 产品的研发和产品设计工作。&lt;/p&gt;

&lt;p&gt;最后，我还是一名共产主义者。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082031@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么下面，我们就开始进入 SoLiD 和数据主权革命的主题了。&lt;/p&gt;

&lt;p&gt;在正式介绍 SoLiD 之前，我先介绍下 SoLiD 的发起人，万维网之父 Tim。他最大的贡献是制定了 HTML 语言和建立了 W3C 万维网联盟。这里我也推荐大家看一本书来更好的理解万维网之父建立 Web 的一个初衷，这本书的名字叫：《编织万维网 —— 万维网之父谈万维网的原初构想》。这本书呢，就介绍了万维网是怎么从一个实验室项目推广到全世界的。为什么我们现在要看这本书？因为现在就是一个巨头垄断的时代，万维网和互联网已经偏离了原本的设计，我们要回顾这些创作者的初心是啥，同时我们年轻一代的人也要从中发现新的机会。另外今年是互联网的五十周年，也是万维网的三十周年，那么再过三十年和五十年，互联网会变成什么样？这值得每个人去思考，尤其是开发者，互联网的建造者，命运是在你们手中的。Tim 对我们整个互联网的发展有着举重若轻的作用，假如没有 Tim，那么就现在的 Web，那么今天的大会也就没有了。&lt;/p&gt;

&lt;p&gt;好，这是对 Tim 的一个介绍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082043@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这句话是 2012 年伦敦奥运会的时候 Tim 发的一个 Twitter，This is for Everyone。这个意思呢，就是说，Web 作为一个有统一规范的生态，是对每个人都开放的，每个人都能从中平等的获取信息，这也是 Web 被创建的一个初衷。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/web-we-have-to-save.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么再看这张图，主要就是现在的互联网巨头们。大家可以看到图片中间是一个人，在聚光灯下，无论是 Youtube 还是 Googkle 都在围着他转，上面还有摄像头，这个人的所有信息都在这些互联网巨头手里一览无余。这就是我们目前 Web 的一个现状 —— 巨头控制几乎所有的东西。&lt;/p&gt;

&lt;p&gt;那么 SoLiD，今天我们这场分享的主角，就是用来重塑现有的互联网的一个有力工具。用 SoLiD，我们将重构人与数据和人与应用之间的关系。这个理解起来很简单，我们现在所有的应用和数据都是一种耦合关系，Google 有 Google 的数据库，Facebook 有 Facebook 的数据库，那么在 SoLiD 的设计中，Google 或者 Facebook 应用本身和数据应该是分离的关系，Google 可以读取 Facebook 的数据库，Facebook 也可以读取 Google 的数据库，而所有这些数据，都是由用户去控制，去授权的。有了 SoLiD，我们的 Web 会有一个新面貌出现。&lt;/p&gt;

&lt;p&gt;首先我们来回顾下 Web 的原初构想。这里我想举一个我自己的例子，我在小学三年级第一次拥有了自己的电脑，相比周围的朋友同学是比较晚的，那么在这个时候我还是处于一种打游戏的阶段，电脑只是我的一个玩具。到了初中的时候，也就是 08 年 09 年，此时我发现了编程这件事情，让我非常的着迷。我从来没有攒过计算机硬件设备，我做的第一件比较专业的和计算机相关的事情是破解了家里的 ADSL，然后用 Discuz 搭建了一个网站。我记得我那个时候特别喜欢上微机课，每到微机课的时候，我都会在学校的电脑教室里打开我的网站，这个网站是一个 IP，然后向同学炫耀：「快看，这是我做的网站，这个服务器还是我家里的电脑！」此后，我还搭建了我的个人博客，从 09 年一直写博客到 19 年，整整十年。到了我高中的时候，也就是 12 年 13 年的时候，移动互联网开始逐渐的火热起来，此时很多事情就变得越来越奇怪了，大家开始讲流量生意，讲用户数据变现，互联网让我越来越陌生了。讲这么一个故事想说的是，Web 是一个非常公平的平台，连一个初中生都能在此基础上进行各种创新，这得益于统一的 W3C 标准和繁荣的生态。这非常符合 Web 在诞生之日就有的一个定位。&lt;/p&gt;

&lt;p&gt;在十年前，是一个个人站长的黄金年代。我们当时做个人博客，个人博客里面链接了其他更多的个人博客，每个人都可以在不同的网站里面发表不同的评论，每个人都不需要作出任何妥协就可以发表自己的声音。Web 最重要的一个发明，超链接技术，现在已经被各大 APP 进行了无限度的分割。这里我一定要吐槽一下微信公众号不能插入超链接，腾讯这种吃相难看的绥靖政策，严重背离了 Web 的初衷，他们不是历史的推手，而是历史的倒退者。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082056@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web 给予了每个人建立自己博客和网站的自由，每个人都可以在自己的网站或其他人的网站内分享他们的知识、见解和故事。Web 就相当于一个人的精神世界，Web 是从生活中来的，但是却高于生活。&lt;/p&gt;

&lt;p&gt;而那些更好的帮助人与人之间进行连接的企业，也获得了很大成功，比如 flickr，last.fm 等。&lt;/p&gt;

&lt;p&gt;正因为 Web 的自由性和无门槛，才促进了全球的创新。每个人都可以通过 Web 将自己的伟大想法告诉全世界。而开发者开发 Web 应用不需要得到任何人的许可，可以随时随地发布自己的创意。在这里，我还要吐槽微信小程序，微信小程序有两个非常大的缺点，一是严格的审核，这点我们都理解它最本质的原因。这种严格的审核，阻碍了大量优质的个人开发者上线优质的应用；二是其自创的语法，已经偏离 W3C 体系，他造了另外一个平行世界，加重了世界的熵。&lt;/p&gt;

&lt;p&gt;小程序把本来一种开放的生态，变成了一种围墙，这是历史的倒退。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082113@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web 的无门槛进入带来了大量创新，比如亚马逊、Twitter 等，这些大家都很清楚了。&lt;/p&gt;

&lt;p&gt;诚然，这些大型企业给予了普通用户非常多的便利，但是我们的数据却都掌握在巨头手中。以前很多人写博客，现在很多人只写微博、发朋友圈。不错，我们拥有了很好的用户体验，但是我们丧失了对数据的控制权。我举个例子来说明我们为什么需要数据的控制权，假如你有一个知乎账号，有几十万粉丝，某一天因为某些事情被知乎封掉了账号，此时你所有的粉丝关系都因为知乎的单方面封禁而丢失了，粉丝其实是你生产的数据，但是却不被你掌控。最好的处理方式是，知乎只是被我授权了我的粉丝关系的一个应用，他封禁的只是我对他平台的使用权，但是我的粉丝关系其实还存在我这边，我还可以授权给微博、微信等。说到粉丝关系，就会有另外一个概念，粉丝是为了什么？是为了推送，因此 SoLiD 也有一个 websocket 推送规范，这些推送可以推送给你的好友列表，不依赖任何应用程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082126@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外一个问题就是隐私泄漏问题，2018 年 Facebook 剑桥分析事件泄漏了 5000 万用户数据，最近 Facebook 又泄漏了 7000 页的用户数据使用条款，该条款说明了 Facebook 如何挟持用户数据杀死竞争对手。在今年年初，杭州一家爬虫公司被封，该爬虫公司爬取了中国八亿人的简历，每年获利上亿。我自己也有亲身经历，最近有猎头找到我，我问她怎么找到我的，她说在某网站上看到我的简历，但是我从未用过那个网站。&lt;/p&gt;

&lt;p&gt;尤其是各种各样的小程序，我们认为这严重损害了 Web 的通用性，主要在于他们在商业载体下的封闭性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/walled-gardens.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大家也可以看看这张图，图里面各大社交公司筑起了自己的高墙，在不同的社交网络中切换时极其复杂。而上面西装革履的大公司资本力量，淡然的看着这一切，这就是我们 Web 的现状。&lt;/p&gt;

&lt;p&gt;在这样一个巨头把持数据的中心化时代，严重伤害了多元性、创新性和选择性。&lt;/p&gt;

&lt;p&gt;这里我想问大家一个问题，如果你只能创建一个应用，那么你会选择做 weixin.com 还是 identity-provider.org? 我猜大多数人会选择做 weixin.com，这里面理由非常多，更大，更全，普通用户更容易感知等。如果是我，我会选择做 identity-provider.org，这是一种范式的转变，变成了以用户身份为中心，然后围绕用户身份做一系列的创新。身份是一个非常复杂的事情，做得好很不容易。&lt;/p&gt;

&lt;p&gt;我拒绝开发小程序应用，因为他太封闭了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082138@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们来详细讲一下基于 SoLiD 的开发范式转变以及 SoLiD 如何重塑互联网用户和互联网数据之间的关系。&lt;/p&gt;

&lt;p&gt;SoLiD 的核心可以归纳为三点，第一点：你拥有你的数据。你可以自由决定你的数据存储到哪里以及怎么导出。这些数据，不限于你的通讯录，你的日程表，你的聊天数据，你喜欢的文章，你点赞的评论等等。这些数据都是归你所有的。你会有一个叫做 Pod 的东西，你可以将其理解为一种可编程的网盘，所有的应用程序读写都会在你的网盘里进行。在 A 应用中存储的数据，B 应用也可以访问，你不需要手动同步，因为这些数据会永远跟着你。&lt;/p&gt;

&lt;p&gt;那么第二点，就是你控制你的数据。你可以决定你的数据有哪些服务商可以读写，以及什么时候不能读写。可以把这点理解成支付宝或者微信支付的免密支付。你可以授权滴滴打车之后自动扣款，你也可以将自动扣款能取消，你就将数据看成你的个人财产就好。&lt;/p&gt;

&lt;p&gt;第三个就是使用 SoLiD 登录，也就是用户在 SoLiD 生态中唯一的身份。通过这个身份，你可以直接登录任意支持 SoLiD 的应用，并且可以将这个账号背后的数据授权给任何你想授权的应用。&lt;/p&gt;

&lt;p&gt;以上三点就是 SoLiD 的核心价值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082148@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果要更好的理解 SoLiD，还需要理解四个核心概念。&lt;/p&gt;

&lt;p&gt;我们知道，SoLiD 的英文全称是 Social Linked Data，所以我们需要理解什么是 Social，为什么 SoLiD 会有社交的想法？以及什么是 Linked Data，为什么数据需要互联？&lt;/p&gt;

&lt;p&gt;那么理解 SoLiD 之前，我们先理解下什么是 PoD，PoD 的全称是 Personal Online Data，也就是个人在线数据的意思，在 SoLiD 中就是存储数据的地方，你可以将 PoD 理解为一个个人网盘。&lt;/p&gt;

&lt;p&gt;那么这个个人网盘可以存储任何东西，结构化的，非结构化的，都可以存储。什么叫结构化的，比如，我喜欢的文章，我点赞的朋友圈，我的好友关系，这些都是结构化的。那么非结构化的，就是我的图片、我的笔记等等。&lt;/p&gt;

&lt;p&gt;所有应用的数据读写，都是在每个用户的 PoD 中进行，同时每个人都有一个 WebID，这个 WebID 后面关联着你的所有数据。&lt;/p&gt;

&lt;p&gt;WebID 也是一个规范，这里就不展开了，展开的话就没完没了，大家可以简单把他理解为一个唯一性 ID。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082157@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么第二个需要理解的，就是本体。前面我也简单的介绍了一下。这里我再稍微提一点。大家看上面的图，首先看我们这个蝙蝠侠，他有头罩，有披风，还有腰带、鞋子等等。那么这些名词，都叫做本体，本体定义了头罩只能叫头罩，而不能叫帽子。再看海绵宝宝，他有皮肤，有眼珠有裤子有斑点，大家还可以看到斑点在皮肤上，那么在这种关系也叫做本体。除了在这种关系，还有像拥有啦，上面啦等等。最右边的呢，是达尔文 core，他是一个植物的本体，植物的本体是有限的一个集合，所以很多人拿它来做研究。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082205@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三个，就是 SoLiD 全称中的 Social 的含义。我们都知道，微信的用户是没有办法和 QQ 的通讯录统一的，你需要重复添加，那么 SoLiD 就定义了一种开放的社交关系图谱，叫做 FOAF，全称是 Friend of a friend，也就是朋友的朋友。比如我认识 A，A 认识 B，那么我就有可能会认识 B。这也是一种三元组的关系集合。大家经常用的企查查其实就是一种 FOAF。SoLiD 是一个以用户和个体为中心的一个生态，所以其必不可少的描述了一种社交关系。FOAF 也是 W3C 的一个标准，他描述了社交关系里的所有本体，SoLiD 直接拿来用了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082215@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;了解完社交之后，我们再看最后一个点，Linked Data。大家这么来看 Linked Data 就很好理解。刚才说的 FOAF 是用来描述人的，那么人背后需要的数据，就是通过 Linked Data 来描述的。Linked Data 是语义网技术的一个集合，所谓 RDF、OWL 等一系列变体。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082226@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SoLiD 带来的东西除了刚才讲的核心价值之外，还有有开发范式的变化。在以前，我们开发一个应用需要自己搭数据库，运维服务器，然后做用户系统，再将用户 ID 与数据关联。有了 SoLiD 之后，这些全都不用做了，SoLiD 会变成互联网上缺失的身份层和数据传输存储层。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082237@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先第一点，就是数据存储方式的变化。大家可以看到右边的这张图，这张图是假设一个人在阅读一篇文章，那么在阅读这篇文章的时候，这篇文章的标题、作者、头像以及内容，不是从一个中心化服务器中读取的，而是从这个作者的 PoD 中读取的。同时，当我喜欢这篇文章，并且点了个赞的时候，这个点赞的记录是存在我自己的 POD 里面的，这就是与传统软件开发最根本的区别。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082247@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讲完数据写入之后，我们来看一下数据读取。还是看这张图，左边是 Facebook、Linkedin 这种数据和应用紧耦合的关系，右边是 SoLiD 架构下的结构图，大家可以清晰的看到，不管是图片管理软件，还是社交应用的 feed 流，还是日程管理软件，都是从用户自己的 PoD 中去读取的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082258@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这就是 SoLiD 带来的，数据读取和写入的这样一个变化。&lt;/p&gt;

&lt;p&gt;那么最后一个范式的变化就是创新者入局的变化。因为 SoLiD 带来的数据确权，使数据可以重复利用，在 A 应用上生产的数据，在 B 应用上也可以使用，应用间可以无缝互联，这让数据不再是创新壁垒，壁垒在于谁能够提供更好的服务以及谁能够取得用户的信任。&lt;/p&gt;

&lt;p&gt;任何一家初创公司都可以快速重复利用现有非隐私数据时，我相信市场的创新活力会有更大的激发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082309@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SoLiD 给我们带来的，不仅是一个开源软件，也不仅仅是一个在此开源软件上进行商业化的公司，而是一个通用的生态，生态里的应用都遵循着同样的范式。同时也是一场革命，这场革命不仅带来了全新的应用开发范式，还将从根本上解决用户数据的所有权问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082322@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;搭建 SoLiD 的服务器非常容易，SoLiD 的服务器主要承担着 SoLiD Pod 的托管作用和一个 HTTP Server 的作用，此 HTTP Server 基于 RESTful 对外提供服务。大家可以把 SoLiD 服务器想象成一个能聚合全球计算能力的 Linux 计算机，这台计算机的计算能力由浏览器承担，数据库能力由整个 Web 承担，聚合查询的时候使用 SPARQL 或 GraphQL 进行查询。如果想要写入文件等非结构化数据，只需要使用符合 RESTful 规范的 POST、PUT、GET 等请求方式进行请求就可以执行创建文件夹、增加文件、删除文件、修改文件等操作。&lt;/p&gt;

&lt;p&gt;同时 SoLiD 还有 WAC（Web Access Control） 这样一个控制权限的协议，可以进行粒度很细的权限分配操作，其控制的粒度和 Linux 一样细。&lt;/p&gt;

&lt;p&gt;基于 SoLiD 的应用，不是说数据在硬件层面被用户所控制，而是从逻辑角度来看，是由用户控制的。这个意思就是说，SoLiD 服务器不是一定要放到用户自己家里，他可能还在云上，或者其他免费的社区版本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082349@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面再谈一谈 SoLiD 的设计原则，主要就是五个原则：Open、Transparent、Accountable、Sovereign 和 User Centric。SoLiD 是开源的，其不受任何政府、组织控制；SoLiD 整个研发流程是透明的，每个人都可以 Reivew 所有的 Pull Request 和代码；SoLiD 是负责任的，其平台设计的目的就是让用户拥有自己的数据，平台本身并不拥有；SoLiD 是为了主权所设计的，赋能用户的优先级永远是最高的；SoLiD 也是以用户为中心的，它的整个生态从开始设计时就是以隐私为核心。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082402@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;聊完了 SoLiD 的一些基础后，我们再从开发者角度看看 SoLiD 整个项目的易用性。使用 SoLiD 开发后，应用从只有一个后端变成拥有多个后端。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082414@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在传统的中心化模型中，App 有一个后端，从一个后端中读取多个数据。但在 SoLiD 这种去中心化的模型中，应用 X 和应用 Y 从不同的 Data Pod 中读写数据，每一个 Pod 中都存着不同人的数据，同时 Pod 与 Pod 之间还可以做很多交互。&lt;/p&gt;

&lt;p&gt;假如有很多 Pod，那么就会产生 Pod 的互操作性问题，比如如何在多个不同的 Pod 之间做联合查询。在传统的数据库模型中，可以用 Join 等关键词在不同的表中做联合查询，那么 Pod 之间的联合查询，也同样可以做到，只不过 Pod 之间的查询是基于网络的，而不是在内存中。&lt;/p&gt;

&lt;p&gt;SoLiD 使用 JSON-LD 来对不同的数据片段进行互联。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082427@2x.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082434@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JSON-LD 是一种简化的 RDF 表示语言，以下是 JSON-LD 和 Turtle 的区别：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082450@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，JSON-LD 比 Turtle 简单易懂的多。&lt;/p&gt;

&lt;p&gt;以上就是 SoLiD 开发体验的介绍，总结下来就是一句话：「从学术化到工程化」。&lt;/p&gt;

&lt;p&gt;聊完开发者体验，我们再来看一看数据民主之路的必然趋势。我们认为互联网是人类社会发展的一个缩影，数据民主是必由之路。我们先看人类社会的一个发展，从一开始的采集社会，人类产生了各个部族群落，此时相对于个人博客和网站的开垦期；再到农业革命，产生了帝国番邦，对应了如今美国的 FLAG、中国的 BATTMD；后来，人类发生了工业革命，这是一场影响深远的革命，不仅改善了人类的生活条件，还产生了一些其他政治上的影响。而如今，互联网的生产力还远远未得到释放，云计算、AI 和区块链都还处于一个很早期的阶段，如果到了某一天，AI 的机器智能大幅提高，能够辅助人类做决策之时，就是互联网数据主权革命将要开始的时候。因为那时，你的数据就是你的思想，就是你的生命，你自然是不想让任何人来控制你身体的某一部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.authing.cn//blog/WX20191120-082504@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后，我们聊一聊 SoLiD 可能带来的几个大的商业机会。&lt;/p&gt;

&lt;p&gt;第一个机会就是身份提供商，身份是一个从计算机存在以来就有的问题，大家可能觉得他被解决的很好了，其实没有被解决好。现在无论是互联网还是工业互联网，抑或是企业内部的环境，所有的身份实现都是不标准的，混乱的，这种混乱每年带来数百亿人民币的浪费。如果谁能推动身份标准化同时能有成熟的产品推向市场，这是一个巨大的机会。为什么要切中身份？因为在 SoLiD 里，所有事情都是围绕身份来的，只有身份这个基础设施做好了，才有后面的一切。&lt;/p&gt;

&lt;p&gt;第二个机会是「个人数据管理平台」。那么什么是「个人数据管理平台」呢，这个也很容易理解，既然你的所有数据都存在 POD 中，那么肯定需要一个集中化的软件来做所有结构化数据和非结构化数据的管理和控制，这种软件的开发难度是非常大的，因为要兼容所有数据类型，你可以把他理解为更普适化的 Excel。这里我要介绍一类产品，我们叫他模块化生产力软件。模块化生产力软件最重要的一个特点是「用文档来表示所有信息」。说到文档，你们最先想到什么？是 Word 对吧。事实上，计算机文档的结构从上世纪 70 年代到现在都没有任何变化。但是世界上的所有其他软件都发生了变化，不管是手机还是电脑。&lt;/p&gt;

&lt;p&gt;换句话说，模块化生产力软件将有可能颠覆 Office 的竞争格局。&lt;/p&gt;

&lt;p&gt;另外一个就是为什么我们要用文档来表示所有信息，因为世界上所有的软件内部的信息组成都是文档。人类历史的开端就是人类学会了在石头上写文档。计算机出现后，人类进入了电子文档时代，这让知识开始在全球范围内快速传播。即使是微信的聊天框、微博的 feed 流，或者是抖音的视频，都是文档的一种表现形式。&lt;/p&gt;

&lt;p&gt;另外一个关键词是「模块化」，为什么要叫他模块化呢？这里我要引入一个新概念，叫做「文档即应用」，就是你所写的文档，将会变成一个可执行的应用，你可以任意修改任何应用的任意信息和界面布局。&lt;/p&gt;

&lt;p&gt;那么当这类软件成熟起来之后，将可以用来管理 SoLiD 里面所有的个人数据。目前这类软件我最看好的是 coda.io coda.io。他为什么好？我也举个简单的例子，大家都知道 Excel 严格意义上来讲可以做任何事情，那么为什么还会有 odoo 这类 erp 软件或者 salesforce 这类 crm 软件出来呢？很简单，因为企业的业务流程，用 excel 很难实现一个用户体验良好的自动化，这类软件的意义就在于将流程自动化出来。但是他们本身的数据控制没有 excel 那么自由。coda，就是将 excel 对数据的控制自由和业务流程的自定义自由很好的结合了起来。&lt;/p&gt;

&lt;p&gt;我写过一篇文章，叫 「文档将重塑全球生产力」，在微信公众号和搜狗上都能搜到，这篇文章有更多关于模块化生产力软件的介绍，大家有兴趣的话可以搜索看一看。&lt;/p&gt;

&lt;p&gt;那么最后一个，就是「以身份为中心的计算平台」。怎么理解呢？就是做一个操作系统，但是这个操作系统不再以管理计算机资源为中心，而是以用户和服务为中心。&lt;/p&gt;

&lt;p&gt;可以简单理解为在这个操作系统内有一个 ID，然后可以登录操作系统内 App Store 的所有应用程序，同时这些应用程序之间的数据都是可以互联的，这时候才会产生真正的个人助理，这才是真正的互联网。&lt;/p&gt;

&lt;p&gt;做这么一个计算平台本身，难度不大。真正的难度在于如何推广出去。首先，我们都十分确定这绝对是未来的一个发展趋势，那么是现在做还是将来做？是我们做还是其他人做，这是非常值得思考的一个问题。&lt;/p&gt;

&lt;p&gt;我们能想到的一些 Marketing 策略就是首先针对三大运营商的高端人群，同时对隐私十分关注的一群人，卖下一代黑莓手机，这些资源是我们目前能接触到的资源。有了这种下一代黑莓手机，那么无论是像 maskbook 这种应用还是其他的区块链类隐私应用，才有推向市场的可能性。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文整理自蒸汽记忆创始人谢扬在 2019 年 11 月 16 日在成都 Web 全栈大会上的演讲，内容有删改。
完整 PPT 可从 Github 上查看：https://leinue.github.io/webfullstack-2019/index.html&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>ivy</name></author><category term="featured" /><summary type="html">Web 给予了每个人建立自己博客和网站的自由，每个人都可以在自己的网站或其他人的网站内分享他们的知识、见解和故事。Web 就相当于一个人的精神世界，Web 是从生活中来的，但是却高于生活。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://inrupt.com/sites/default/files/2018-12/blog_mozilla.jpg" /></entry><entry><title type="html">身份上云 or 自建？这里有 20 个问题值得你思考</title><link href="http://localhost:4000/blog/%E8%BA%AB%E4%BB%BD%E4%B8%8A%E4%BA%91-or-%E8%87%AA%E5%BB%BA-%E8%BF%99%E9%87%8C%E6%9C%89-20-%E4%B8%AA%E9%97%AE%E9%A2%98%E5%80%BC%E5%BE%97%E4%BD%A0%E6%80%9D%E8%80%83/" rel="alternate" type="text/html" title="身份上云 or 自建？这里有 20 个问题值得你思考" /><published>2019-10-27T00:00:00+08:00</published><updated>2019-10-27T00:00:00+08:00</updated><id>http://localhost:4000/blog/%E8%BA%AB%E4%BB%BD%E4%B8%8A%E4%BA%91%20or%20%E8%87%AA%E5%BB%BA%3F%E8%BF%99%E9%87%8C%E6%9C%89%2020%20%E4%B8%AA%E9%97%AE%E9%A2%98%E5%80%BC%E5%BE%97%E4%BD%A0%E6%80%9D%E8%80%83</id><content type="html" xml:base="http://localhost:4000/blog/%E8%BA%AB%E4%BB%BD%E4%B8%8A%E4%BA%91-or-%E8%87%AA%E5%BB%BA-%E8%BF%99%E9%87%8C%E6%9C%89-20-%E4%B8%AA%E9%97%AE%E9%A2%98%E5%80%BC%E5%BE%97%E4%BD%A0%E6%80%9D%E8%80%83/">&lt;p&gt;身份管理自从计算机问世以来就存在，很多人觉得身份管理很简单，其实难度远超你的想象。&lt;/p&gt;

&lt;h2 id=&quot;一为什么要自建身份管理&quot;&gt;一、为什么要自建身份管理？&lt;/h2&gt;
&lt;p&gt;自计算机问世以来，身份管理一直是软件的主要组成部分：打孔机和早期操作系统都受到用户名/密码身份验认证的保护。拥有如此悠久的历史，你会认为身份管理是一个已经被妥善解决的问题。&lt;/p&gt;

&lt;p&gt;自建身份管理一般在以下场景有充足的理由：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你正在做一些简单的事情：没有敏感信息或隐私问题，并且你的安全性要求不高，你的用户数量不多，同时用户类型比较单一，只有几个应用程序；&lt;/li&gt;
  &lt;li&gt;你是一位经验丰富的开发人员，并且在顶尖团队中工作，多年来一直为应用程序，网站，API 和服务构建身份认证；&lt;/li&gt;
  &lt;li&gt;某天你的预算减少了，这时你必须选择一些方案来为组织的大战略省钱；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;坦白说，如果你只有一个简单的 Web 应用，只需要一两个社交应用提供一键登录，并且不需要「用户名 - 密码」或其他更细致的用来登录的功能，那么自建就很容易。你可以在 Github 上找到大量开源框架来解决此类问题。&lt;/p&gt;

&lt;h2 id=&quot;二为什么要购买身份管理服务&quot;&gt;二、为什么要购买身份管理服务？&lt;/h2&gt;
&lt;p&gt;我们经常听到客户的研发团队这么评价 Authing：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们自己就能做，为什么要用你们的，而且还要付钱？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来让我们深入研究这个问题。&lt;/p&gt;

&lt;h3 id=&quot;1专业的人做专业的事&quot;&gt;1、专业的人做专业的事&lt;/h3&gt;
&lt;p&gt;实现一套身份管理看上去似乎很简单。但是失败是很可怕的，一旦出现了问题，你的品牌就会受到严重损害。面对持续的黑客攻击，和无休止的漏洞，你是否能准确知道自己的工作足够好到可以保护用户隐私和企业资产？&lt;/p&gt;

&lt;h3 id=&quot;2投入产出比&quot;&gt;2、投入产出比&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;自建身份管理并不是免费的！&lt;/strong&gt;
将资源到投入身份管理研发时会产生高昂的的机会成本。身份认证真的是你想要做的吗？假如你做一款应用，会自己写一套 RDBMS(关系数据库管理系统) 吗？身份管理就像 RDBMS，当你可以花合理的钱将非核心的繁重工作委派给专业人士时，为什么还要自建身份管理等基础设施呢？身份泄漏产生的成本可能高达数百万美元，你能否认身份安全没有价值吗？在评估购买身份管理服务的投资回报率时，请考虑这些因素。&lt;/p&gt;

&lt;h3 id=&quot;3复杂性&quot;&gt;3、复杂性&lt;/h3&gt;
&lt;p&gt;你的产品在前期肯定是简单的，但是，一旦你的产品成功推向市场，你开始需要&lt;strong&gt;支持更广泛的身份提供商&lt;/strong&gt;。你可能还有合作伙伴，你可能还会推出移动 APP 和 API 让其他人调用，这样你的受众群体才能扩大。如果你在欧洲，你还会面临 GDPR 的监管（中国也即将出台相关法律）。这时身份管理开始变的复杂，维护自己的身份管理系统成本会比你预期要高的多。&lt;/p&gt;

&lt;h3 id=&quot;4测验&quot;&gt;4、测验&lt;/h3&gt;
&lt;p&gt;上面的几个问题可能已经引发了你的思考。有些你可能不在意，有些你可能在工作中已经遇到。但是，我们邀请你根据目前的状态和未来几个月或几年的发展方向回答以下 20 个问题并切实考虑它们。&lt;/p&gt;

&lt;h4 id=&quot;1用户相关的问题&quot;&gt;1）用户相关的问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;你是否考虑过如何实现「用户管理」？是自助管理还是集中管理？用户体验会是什么样？&lt;/li&gt;
  &lt;li&gt;你有用户使用多个「身份提供商」登录你的应用吗？你如何判定他们是一个人？&lt;/li&gt;
  &lt;li&gt;你是否有多个服务或软件需要认证？如果有，他们使用了同一个技术栈还是多个技术栈？（不同的技术栈会加大研发成本）&lt;/li&gt;
  &lt;li&gt;你是否需要统计信息来查看用户的增长情况、设备情况、IP 地理位置和认证情况？如果需要，你计划如何收集、分析和可视化这些数据？&lt;/li&gt;
  &lt;li&gt;你如何记录并解决用户身份认证过程中出现的异常事件（忘记密码、无法登录、认证失败、过期等）？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2应用服务相关的问题&quot;&gt;2）应用服务相关的问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;你如何在漏洞被曝出之前及时发现漏洞？发现漏洞后如何通过补丁快速修复漏洞？&lt;/li&gt;
  &lt;li&gt;你如何处理在不同「身份提供商」之间认证时产生的「标准不兼容」问题？当这些身份提供商之间都使用了不同的技术栈之后，你将作何处理？&lt;/li&gt;
  &lt;li&gt;你的 DevOps 团队能否在开发身份认证基础设施上保持专业、领先地位和最佳实践？&lt;/li&gt;
  &lt;li&gt;你有 MFA（多因素认证）策略吗？你打算怎么跨平台的实现 MFA？你是否希望你的用户能在 iOS 或 Android 设备上使用 FaceID 或指纹来进行身份认证？&lt;/li&gt;
  &lt;li&gt;你是否考虑过用户存储的可伸缩性、性能、查询和可用性要求？在流量过大的情况下你如何保证登录系统的 99.999% 可用？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;3身份提供商idp相关的问题&quot;&gt;3）身份提供商（IDP）相关的问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;你在迁移老应用进更现代的身份管理系统时，如何让用户不重置密码无缝迁移？&lt;/li&gt;
  &lt;li&gt;你的一个 B2B 客户需要 SSO，你可以在内网中或防火墙后面与 Active Directory 做联合认证吗？&lt;/li&gt;
  &lt;li&gt;不同的 SAML IdP 有多种格式存储和传递声明 —— 你是否有一种简单的方法让声明完全自定义化？&lt;/li&gt;
  &lt;li&gt;OpenID Connect 是流行的身份认证新标准：基于 REST / JSON 和 OAuth 2.0。但是其魔鬼般的实施细节，你计划如何在不同的后端语言和客户端之间实现它？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4安全与合规问题&quot;&gt;4）安全与合规问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;身份系统是黑客攻击的首要目标。你是否考虑过实施暴力保护？比如 API 网关上的 DDoS 预防和缓解？&lt;/li&gt;
  &lt;li&gt;你是否打算让第三方安全顾问来进行独立的渗透测试，代码审查和体系结构审查以验证安全性和最佳实践？&lt;/li&gt;
  &lt;li&gt;在身份实施过程中产生的安全漏洞报告你计划如何解决？&lt;/li&gt;
  &lt;li&gt;你是否需要上下文逐步身份认证（Contextual Step-up Authentication）？例如 IP 白名单或 Active Directory 成员身份？你是否需要多种密码加密算法？无密码身份认证对你的用户是否有效或存在意义？&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;5时间与成本问题&quot;&gt;5）时间与成本问题&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;你需要雇佣多少人，包括 IT，研发人员和外包服务（例如咨询专业知识）？这些人很难找到，雇用起来也很昂贵。你将从何处获得这些人才，费用是多少？&lt;/li&gt;
  &lt;li&gt;你预计的上线日期是什么时候？你的 IAM 解决方案需要多少时间和多少次迭代？&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Forrester Consulting 的研究报告指出，使用身份管理服务可以产生 548％ 的投资回报率和 370 万美元的费用节省。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用 Authing 可以一劳永逸的解决上述 20 个问题，任何想做计算机软件的企业或个人，只需要接入 Authing 的云服务，就可以以极低的成本，快速解决那些需要耗费数百万元人民币才能解决的问题。身份的复杂性和混乱性，造成了每年数十亿的浪费，因为其表面的简单，导致了缺乏系统的标准，每家厂商都会自己搞一套自己的标准，这些混乱的标准既养活了一群人，也加重了这群人的开发负担。&lt;/p&gt;

&lt;p&gt;身份这件事，听上去是老故事，看上去很简单，但其从未得到很好的解决，这就是 Authing 存在的意义。&lt;/p&gt;</content><author><name>ivy</name></author><summary type="html">身份管理自从计算机问世以来就存在，很多人觉得身份管理很简单，其实难度远超你的想象。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.authing.cn/blog/20191027184218.png" /></entry></feed>